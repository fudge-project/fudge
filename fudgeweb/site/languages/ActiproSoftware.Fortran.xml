<SyntaxLanguage Key="Fortran" LanguageDefinitionVersion="4.0" Secure="True" WordContainsAdditionalCharacters="@_"
				SyntaxLanguageTypeName="CodeHighlighterTest.CSharpDynamicSyntaxLanguage, CodeHighlighterTest"
				xmlns="http://ActiproSoftware/SyntaxEditor/4.0/LanguageDefinition">

  <!-- String Properties -->
  <Properties>
    <Property Key="Creator" Value="Actipro Software LLC" />
    <Property Key="Copyright" Value="Copyright (c) 2001-2006 Actipro Software LLC.  All rights reserved." />
  </Properties>

  <!-- Triggers -->
  <Triggers>
    <AutoReplaceTrigger Key="AutoReplaceTrigger">
      <AutoReplaceTriggerActivators>
        <AutoReplaceTriggerActivator Character=" " />
        <AutoReplaceTriggerActivator Character="&#x9;" />
        <AutoReplaceTriggerActivator Character="&#xD;" />
        <AutoReplaceTriggerActivator Character="." />
        <AutoReplaceTriggerActivator Character="," />
        <AutoReplaceTriggerActivator Character=":" />
        <AutoReplaceTriggerActivator Character=";" />
        <AutoReplaceTriggerActivator Character="=" />
        <AutoReplaceTriggerActivator Character="(" />
        <AutoReplaceTriggerActivator Character=")" />
        <AutoReplaceTriggerActivator Character="[" />
        <AutoReplaceTriggerActivator Character="]" />
        <AutoReplaceTriggerActivator Character="{" />
        <AutoReplaceTriggerActivator Character="}" />
      </AutoReplaceTriggerActivators>
      <AutoReplaceTriggerValidStates>
        <AutoReplaceTriggerValidState State="DefaultState" />
      </AutoReplaceTriggerValidStates>
    </AutoReplaceTrigger>
    <KeyPressTrigger Key="MemberListTrigger" Character=".">
      <KeyPressTriggerValidStates>
        <KeyPressTriggerValidState State="DefaultState" />
      </KeyPressTriggerValidStates>
    </KeyPressTrigger>    
  </Triggers>

  <!-- Highlighting Styles -->
  <Styles>
    <!-- Optional Styles to Override Built-In Styles -->
    <Style Key="BracketHighlightingStyle" Name="Bracket Highlighted Text" BackColor="Silver" />
    <Style Key="CollapsibleTextStyle" Name="Collapsible Text" ForeColor="Gray" BorderStyle="Solid" BorderCornerStyle="SinglePixelRounded" />
    <Style Key="CodeSnippetFieldStyle" Name="Code Snippet Field" BackColor="#BFE4BF" BorderStyle="Solid" />
    <Style Key="CodeSnippetDependentFieldStyle" Name="Code Snippet Dependent Field" BorderStyle="Dot" />
    <!-- C++ Styles -->
    <Style Key="ReservedWordStyle" ForeColor="Blue" />
    <Style Key="NativeTypeStyle" ForeColor="Blue" />
    <Style Key="OperatorStyle" ForeColor="Black" />
    <Style Key="NumberStyle" ForeColor="Purple" />
    <Style Key="StringDelimiterStyle" ForeColor="Maroon" />
    <Style Key="StringDefaultStyle" ForeColor="Maroon" />
    <Style Key="CommentDelimiterStyle" ForeColor="Green" />
    <Style Key="CommentURLStyle" ForeColor="Green" UnderlineStyle="Solid" CursorName="Hand" CursorModifierKeys="AnyControl" />
    <Style Key="CommentDefaultStyle" ForeColor="Green" />
  </Styles>

  <!-- Macros -->
  <Macros>
    <!-- URL -->
    <Macro Key="URLMacro" Value="https?:// [\w\-]+ (\. [\w\-]+)* (/ [\w\-./?%=]*)?" />
  </Macros>

  <!-- States -->
  <States>
    <!-- Code -->
    <State Key="DefaultState">
      <!-- Patterns Groups -->
      <PatternGroups>
        <!-- Whitespace -->
        <RegexPatternGroup TokenKey="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
        <!-- Line Terminators -->
        <RegexPatternGroup TokenKey="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
        <!-- Brackets -->
        <ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenKey="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" />
        <ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenKey="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" />
        <ExplicitPatternGroup Key="OpenCurlyBracePatternGroup" TokenKey="OpenCurlyBraceToken" PatternValue="{" EndBracket="CloseCurlyBracePatternGroup" />
        <ExplicitPatternGroup Key="CloseCurlyBracePatternGroup" TokenKey="CloseCurlyBraceToken" PatternValue="}" StartBracket="OpenCurlyBracePatternGroup" />
        <ExplicitPatternGroup Key="OpenSquareBracePatternGroup" TokenKey="OpenSquareBraceToken" PatternValue="[" EndBracket="CloseSquareBracePatternGroup" />
        <ExplicitPatternGroup Key="CloseSquareBracePatternGroup" TokenKey="CloseSquareBraceToken" PatternValue="]" StartBracket="OpenSquareBracePatternGroup" />
        <!-- Punctuation -->
        <ExplicitPatternGroup TokenKey="PunctuationToken">
          <ExplicitPatterns>
            . , : ;
          </ExplicitPatterns>
        </ExplicitPatternGroup>
        <!-- Native Types -->
        <ExplicitPatternGroup TokenKey="NativeTypeToken" Style="NativeTypeStyle" LookAhead="{NonWordMacro}|\z" CaseSensitivity="Insensitive">
          <ExplicitPatterns>
            CHARACTER COMPLEX DOUBLE INTEGER LOGICAL REAL
          </ExplicitPatterns>
        </ExplicitPatternGroup>
        <!-- Booleans -->
        <ExplicitPatternGroup TokenKey="BooleanToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}|\z" CaseSensitivity="Insensitive">
          <ExplicitPatterns>
            FALSE TRUE
          </ExplicitPatterns>
        </ExplicitPatternGroup>
        <!-- Reserved Words -->
        <ExplicitPatternGroup TokenKey="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}|\z" CaseSensitivity="Insensitive">
          <ExplicitPatterns>
            ACCEPT ASSIGN AUTOMATIC BACKSPACE BLOCK DATA BYTE
            CALL CLOSE COMMON CONTINUE DATA 
            DECODE DIMENSION DO WHILE COMPLEX DOUBLE PRECISION
            ELSE IF ENCODE END FILE MAP STRUCTURE UNION ENTRY EQUIVALENCE
            EXTERNAL FORMAT FUNCTION GOTO IMPLICIT INCLUDE INQUIRE
            INTRINSIC NAMELIST OPEN OPTIONS PARAMETER PAUSE POINTER
            PRINT PRAGMA PROGRAM RECORD RETURN REWIND SAVE STATIC
            STOP STRUCTURE SUBROUTINE TYPE VIRTUAL VOLATILE WRITE
          </ExplicitPatterns>
        </ExplicitPatternGroup>
        <!-- Identifier -->
        <RegexPatternGroup TokenKey="IdentifierToken" PatternValue="@? (_ | {AlphaMacro})({WordMacro})*" />
        <!-- Operators -->
        <ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle">
          <ExplicitPatterns>
            == !=
            =  
            + - * / %
            &amp; &gt; &lt;
            ? . : $
          </ExplicitPatterns>
        </ExplicitPatternGroup>
        <!-- Numbers -->
        <RegexPatternGroup TokenKey="RealNumberToken" Style="NumberStyle" LookAhead="{NonWordMacro}|\z">
          <RegexPattern Value="{DigitMacro}* \. {DigitMacro}+ ([Ee] [\+\-]? {DigitMacro}+)? [FfDdMm]?" />
          <RegexPattern Value="{DigitMacro}+ [Ee] [\+\-]? {DigitMacro}+ [FfDdMm]" />
        </RegexPatternGroup>
        <RegexPatternGroup TokenKey="IntegerNumberToken" Style="NumberStyle" PatternValue="{DigitMacro}+ (([Uu]? [Ll]?) | ([Ll]? [Uu]?))" LookAhead="{NonWordMacro}|\z" />
        <RegexPatternGroup TokenKey="HexIntegerNumberToken" Style="NumberStyle" PatternValue="0 [xX] {HexDigitMacro}+ (([Uu]? [Ll]?) | ([Ll]? [Uu]?))" LookAhead="{NonWordMacro}|\z" />
      </PatternGroups>
      <!-- Child States -->
      <ChildStates>
        <ChildState Key="CharacterState" />
        <ChildState Key="StringState" />
        <ChildState Key="CommentState"/>
      </ChildStates>
    </State>

    <!-- Characters -->
    <State Key="CharacterState" TokenKey="CharacterDefaultToken" Style="StringDefaultStyle">
      <!-- Scopes -->
      <Scopes>
        <Scope>
          <ExplicitPatternGroup Type="StartScope" TokenKey="CharacterStartToken" Style="StringDelimiterStyle" PatternValue="'" />
          <RegexPatternGroup Type="EndScope" TokenKey="CharacterEndToken" Style="StringDelimiterStyle" PatternValue="['\n]" />
        </Scope>
      </Scopes>
      <!-- Patterns Groups -->
      <PatternGroups>
        <RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\x {HexDigitMacro}{1,4}" />
        <RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\u {HexDigitMacro}{4,4}" />
        <RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\U {HexDigitMacro}{8,8}" />
        <RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\." />
        <RegexPatternGroup TokenKey="CharacterWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
        <RegexPatternGroup TokenKey="CharacterWordToken" PatternValue="\w+" />
        <RegexPatternGroup TokenKey="CharacterDefaultToken" PatternValue="[^'\n]" />
      </PatternGroups>
    </State>

    <!-- Strings -->
    <State Key="StringState" TokenKey="StringDefaultToken" Style="StringDefaultStyle">
      <!-- Scopes -->
      <Scopes>
        <Scope>
          <ExplicitPatternGroup Type="StartScope" TokenKey="StringStartToken" Style="StringDelimiterStyle" PatternValue="&quot;" />
          <RegexPatternGroup Type="EndScope" TokenKey="StringEndToken" Style="StringDelimiterStyle" PatternValue="[\&quot;\n]" />
        </Scope>
      </Scopes>
      <!-- Patterns Groups -->
      <PatternGroups>
        <RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\x {HexDigitMacro}{1,4}" />
        <RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\u {HexDigitMacro}{4,4}" />
        <RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\U {HexDigitMacro}{8,8}" />
        <RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\." />
        <RegexPatternGroup TokenKey="StringWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
        <RegexPatternGroup TokenKey="StringWordToken" PatternValue="\w+" />
        <RegexPatternGroup TokenKey="StringDefaultToken" PatternValue="[^\&quot;\n]" />
      </PatternGroups>
    </State>


    <!-- Comments -->
    <State Key="CommentState" TokenKey="CommentDefaultToken" Style="CommentDefaultStyle">
      <!-- Scopes -->
      <Scopes>
        <Scope>
          <ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="!" />
          <RegexPatternGroup Type="EndScope" TokenKey="CommentEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
        </Scope>
      </Scopes>
      <!-- Patterns Groups -->
      <PatternGroups>
        <RegexPatternGroup TokenKey="CommentDelimiterToken" Style="CommentDelimiterStyle" PatternValue="//" />
        <RegexPatternGroup TokenKey="CommentWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
        <RegexPatternGroup TokenKey="CommentURLToken" Style="CommentURLStyle" PatternValue="{URLMacro}" />
        <RegexPatternGroup TokenKey="CommentLineTerminatorToken" PatternValue="{LineTerminatorMacro}" LookAhead="{LineTerminatorWhitespaceMacro}* // [^/]" IsWhitespace="True" />
        <RegexPatternGroup TokenKey="CommentWordToken" PatternValue="\w+" />
        <RegexPatternGroup TokenKey="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}" />
      </PatternGroups>
    </State>

  </States>

  <!-- Example Text -->
  <ExampleText>
    <![CDATA[
		]]>
  </ExampleText>

</SyntaxLanguage>
