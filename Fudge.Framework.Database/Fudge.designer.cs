#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fudge.Framework.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="fudge")]
	public partial class FudgeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAffiliation(Affiliation instance);
    partial void UpdateAffiliation(Affiliation instance);
    partial void DeleteAffiliation(Affiliation instance);
    partial void InsertArticleChange(ArticleChange instance);
    partial void UpdateArticleChange(ArticleChange instance);
    partial void DeleteArticleChange(ArticleChange instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertBlog(Blog instance);
    partial void UpdateBlog(Blog instance);
    partial void DeleteBlog(Blog instance);
    partial void InsertBlogTag(BlogTag instance);
    partial void UpdateBlogTag(BlogTag instance);
    partial void DeleteBlogTag(BlogTag instance);
    partial void InsertClarification(Clarification instance);
    partial void UpdateClarification(Clarification instance);
    partial void DeleteClarification(Clarification instance);
    partial void InsertContestProblem(ContestProblem instance);
    partial void UpdateContestProblem(ContestProblem instance);
    partial void DeleteContestProblem(ContestProblem instance);
    partial void InsertContest(Contest instance);
    partial void UpdateContest(Contest instance);
    partial void DeleteContest(Contest instance);
    partial void InsertContestUser(ContestUser instance);
    partial void UpdateContestUser(ContestUser instance);
    partial void DeleteContestUser(ContestUser instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertEditorial(Editorial instance);
    partial void UpdateEditorial(Editorial instance);
    partial void DeleteEditorial(Editorial instance);
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertEventInvitation(EventInvitation instance);
    partial void UpdateEventInvitation(EventInvitation instance);
    partial void DeleteEventInvitation(EventInvitation instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertForumCategory(ForumCategory instance);
    partial void UpdateForumCategory(ForumCategory instance);
    partial void DeleteForumCategory(ForumCategory instance);
    partial void InsertForum(Forum instance);
    partial void UpdateForum(Forum instance);
    partial void DeleteForum(Forum instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertKeyword(Keyword instance);
    partial void UpdateKeyword(Keyword instance);
    partial void DeleteKeyword(Keyword instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertNews(News instance);
    partial void UpdateNews(News instance);
    partial void DeleteNews(News instance);
    partial void InsertNewsFeed(NewsFeed instance);
    partial void UpdateNewsFeed(NewsFeed instance);
    partial void DeleteNewsFeed(NewsFeed instance);
    partial void InsertNewsletter(Newsletter instance);
    partial void UpdateNewsletter(Newsletter instance);
    partial void DeleteNewsletter(Newsletter instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertPicture(Picture instance);
    partial void UpdatePicture(Picture instance);
    partial void DeletePicture(Picture instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertProblem(Problem instance);
    partial void UpdateProblem(Problem instance);
    partial void DeleteProblem(Problem instance);
    partial void InsertProblemSubmission(ProblemSubmission instance);
    partial void UpdateProblemSubmission(ProblemSubmission instance);
    partial void DeleteProblemSubmission(ProblemSubmission instance);
    partial void InsertProblemTag(ProblemTag instance);
    partial void UpdateProblemTag(ProblemTag instance);
    partial void DeleteProblemTag(ProblemTag instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void InsertRun(Run instance);
    partial void UpdateRun(Run instance);
    partial void DeleteRun(Run instance);
    partial void InsertSource(Source instance);
    partial void UpdateSource(Source instance);
    partial void DeleteSource(Source instance);
    partial void InsertStanding(Standing instance);
    partial void UpdateStanding(Standing instance);
    partial void DeleteStanding(Standing instance);
    partial void InsertSuggestedEntity(SuggestedEntity instance);
    partial void UpdateSuggestedEntity(SuggestedEntity instance);
    partial void DeleteSuggestedEntity(SuggestedEntity instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamUser(TeamUser instance);
    partial void UpdateTeamUser(TeamUser instance);
    partial void DeleteTeamUser(TeamUser instance);
    partial void InsertTestCase(TestCase instance);
    partial void UpdateTestCase(TestCase instance);
    partial void DeleteTestCase(TestCase instance);
    partial void InsertTestRun(TestRun instance);
    partial void UpdateTestRun(TestRun instance);
    partial void DeleteTestRun(TestRun instance);
    partial void InsertTopic(Topic instance);
    partial void UpdateTopic(Topic instance);
    partial void DeleteTopic(Topic instance);
    partial void InsertTopicSubscription(TopicSubscription instance);
    partial void UpdateTopicSubscription(TopicSubscription instance);
    partial void DeleteTopicSubscription(TopicSubscription instance);
    partial void InsertUserRating(UserRating instance);
    partial void UpdateUserRating(UserRating instance);
    partial void DeleteUserRating(UserRating instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCodeSnippet(CodeSnippet instance);
    partial void UpdateCodeSnippet(CodeSnippet instance);
    partial void DeleteCodeSnippet(CodeSnippet instance);
    #endregion
		
		public FudgeDataContext() : 
				base(global::Fudge.Framework.Database.Properties.Settings.Default.fudgeConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public FudgeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FudgeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FudgeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FudgeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Affiliation> Affiliations
		{
			get
			{
				return this.GetTable<Affiliation>();
			}
		}
		
		public System.Data.Linq.Table<ArticleChange> ArticleChanges
		{
			get
			{
				return this.GetTable<ArticleChange>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Blog> Blogs
		{
			get
			{
				return this.GetTable<Blog>();
			}
		}
		
		public System.Data.Linq.Table<BlogTag> BlogTags
		{
			get
			{
				return this.GetTable<BlogTag>();
			}
		}
		
		public System.Data.Linq.Table<Clarification> Clarifications
		{
			get
			{
				return this.GetTable<Clarification>();
			}
		}
		
		public System.Data.Linq.Table<ContestProblem> ContestProblems
		{
			get
			{
				return this.GetTable<ContestProblem>();
			}
		}
		
		public System.Data.Linq.Table<Contest> Contests
		{
			get
			{
				return this.GetTable<Contest>();
			}
		}
		
		public System.Data.Linq.Table<ContestUser> ContestUsers
		{
			get
			{
				return this.GetTable<ContestUser>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Editorial> Editorials
		{
			get
			{
				return this.GetTable<Editorial>();
			}
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<EventInvitation> EventInvitations
		{
			get
			{
				return this.GetTable<EventInvitation>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<ForumCategory> ForumCategories
		{
			get
			{
				return this.GetTable<ForumCategory>();
			}
		}
		
		public System.Data.Linq.Table<Forum> Forums
		{
			get
			{
				return this.GetTable<Forum>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<Keyword> Keywords
		{
			get
			{
				return this.GetTable<Keyword>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<News> News
		{
			get
			{
				return this.GetTable<News>();
			}
		}
		
		public System.Data.Linq.Table<NewsFeed> NewsFeeds
		{
			get
			{
				return this.GetTable<NewsFeed>();
			}
		}
		
		public System.Data.Linq.Table<Newsletter> Newsletters
		{
			get
			{
				return this.GetTable<Newsletter>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Problem> Problems
		{
			get
			{
				return this.GetTable<Problem>();
			}
		}
		
		public System.Data.Linq.Table<ProblemSubmission> ProblemSubmissions
		{
			get
			{
				return this.GetTable<ProblemSubmission>();
			}
		}
		
		public System.Data.Linq.Table<ProblemTag> ProblemTags
		{
			get
			{
				return this.GetTable<ProblemTag>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<Run> Runs
		{
			get
			{
				return this.GetTable<Run>();
			}
		}
		
		public System.Data.Linq.Table<Source> Sources
		{
			get
			{
				return this.GetTable<Source>();
			}
		}
		
		public System.Data.Linq.Table<Standing> Standings
		{
			get
			{
				return this.GetTable<Standing>();
			}
		}
		
		public System.Data.Linq.Table<SuggestedEntity> SuggestedEntities
		{
			get
			{
				return this.GetTable<SuggestedEntity>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamUser> TeamUsers
		{
			get
			{
				return this.GetTable<TeamUser>();
			}
		}
		
		public System.Data.Linq.Table<TestCase> TestCases
		{
			get
			{
				return this.GetTable<TestCase>();
			}
		}
		
		public System.Data.Linq.Table<TestRun> TestRuns
		{
			get
			{
				return this.GetTable<TestRun>();
			}
		}
		
		public System.Data.Linq.Table<Topic> Topics
		{
			get
			{
				return this.GetTable<Topic>();
			}
		}
		
		public System.Data.Linq.Table<TopicSubscription> TopicSubscriptions
		{
			get
			{
				return this.GetTable<TopicSubscription>();
			}
		}
		
		public System.Data.Linq.Table<UserRating> UserRatings
		{
			get
			{
				return this.GetTable<UserRating>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<CodeSnippet> CodeSnippets
		{
			get
			{
				return this.GetTable<CodeSnippet>();
			}
		}
		
		[Function(Name="dbo.sp_SubmitAcceptedRun")]
		public int sp_SubmitAcceptedRun([Parameter(Name="AcceptedRunId", DbType="Int")] System.Nullable<int> acceptedRunId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), acceptedRunId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Affiliations")]
	public partial class Affiliation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AffiliationId;
		
		private int _UserId;
		
		private int _EntityId;
		
		private string _Email;
		
		private string _ActivationCode;
		
		private System.DateTime _JoinTime;
		
		private System.Nullable<System.DateTime> _LeaveTime;
		
		private AffiliationType _Type;
		
		private AffiliationStatus _Status;
		
		private EntitySet<Contest> _Contests;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAffiliationIdChanging(int value);
    partial void OnAffiliationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActivationCodeChanging(string value);
    partial void OnActivationCodeChanged();
    partial void OnJoinTimeChanging(System.DateTime value);
    partial void OnJoinTimeChanged();
    partial void OnLeaveTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveTimeChanged();
    partial void OnTypeChanging(AffiliationType value);
    partial void OnTypeChanged();
    partial void OnStatusChanging(AffiliationStatus value);
    partial void OnStatusChanged();
    #endregion
		
		public Affiliation()
		{
			this._Contests = new EntitySet<Contest>(new Action<Contest>(this.attach_Contests), new Action<Contest>(this.detach_Contests));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Entity = default(EntityRef<Entity>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_AffiliationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AffiliationId
		{
			get
			{
				return this._AffiliationId;
			}
			set
			{
				if ((this._AffiliationId != value))
				{
					this.OnAffiliationIdChanging(value);
					this.SendPropertyChanging();
					this._AffiliationId = value;
					this.SendPropertyChanged("AffiliationId");
					this.OnAffiliationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntityId", DbType="Int NOT NULL")]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(320) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ActivationCode", DbType="VarChar(16)")]
		public string ActivationCode
		{
			get
			{
				return this._ActivationCode;
			}
			set
			{
				if ((this._ActivationCode != value))
				{
					this.OnActivationCodeChanging(value);
					this.SendPropertyChanging();
					this._ActivationCode = value;
					this.SendPropertyChanged("ActivationCode");
					this.OnActivationCodeChanged();
				}
			}
		}
		
		[Column(Storage="_JoinTime", DbType="DateTime NOT NULL")]
		public System.DateTime JoinTime
		{
			get
			{
				return this._JoinTime;
			}
			set
			{
				if ((this._JoinTime != value))
				{
					this.OnJoinTimeChanging(value);
					this.SendPropertyChanging();
					this._JoinTime = value;
					this.SendPropertyChanged("JoinTime");
					this.OnJoinTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LeaveTime
		{
			get
			{
				return this._LeaveTime;
			}
			set
			{
				if ((this._LeaveTime != value))
				{
					this.OnLeaveTimeChanging(value);
					this.SendPropertyChanging();
					this._LeaveTime = value;
					this.SendPropertyChanged("LeaveTime");
					this.OnLeaveTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public AffiliationType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public AffiliationStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Affiliation_Contest", Storage="_Contests", OtherKey="EntityId")]
		public EntitySet<Contest> Contests
		{
			get
			{
				return this._Contests;
			}
			set
			{
				this._Contests.Assign(value);
			}
		}
		
		[Association(Name="Affiliation_Team", Storage="_Teams", OtherKey="AffiliationId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[Association(Name="Affiliation_User", Storage="_Users", OtherKey="AffiliationId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Entity_Affiliation", Storage="_Entity", ThisKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.Affiliations.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.Affiliations.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(int);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[Association(Name="User_Affiliation", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Affiliations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Affiliations.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contests(Contest entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = this;
		}
		
		private void detach_Contests(Contest entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = null;
		}
	}
	
	[Table(Name="dbo.ArticleChanges")]
	public partial class ArticleChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleChangeId;
		
		private int _ArticleId;
		
		private int _UserId;
		
		private System.DateTime _Timestamp;
		
		private System.Xml.Linq.XElement _Text;
		
		private string _Description;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleChangeIdChanging(int value);
    partial void OnArticleChangeIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTextChanging(System.Xml.Linq.XElement value);
    partial void OnTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ArticleChange()
		{
			this._Article = default(EntityRef<Article>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleChangeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleChangeId
		{
			get
			{
				return this._ArticleChangeId;
			}
			set
			{
				if ((this._ArticleChangeId != value))
				{
					this.OnArticleChangeIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleChangeId = value;
					this.SendPropertyChanged("ArticleChangeId");
					this.OnArticleChangeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ArticleId", DbType="Int NOT NULL")]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Article_ArticleChange", Storage="_Article", ThisKey="ArticleId", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.ArticleChanges.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.ArticleChanges.Add(this);
						this._ArticleId = value.ArticleId;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[Association(Name="User_ArticleChange", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ArticleChanges.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ArticleChanges.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Articles")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleId;
		
		private string _Name;
		
		private System.DateTime _Timestamp;
		
		private System.Xml.Linq.XElement _Text;
		
		private int _RatingId;
		
		private EntitySet<ArticleChange> _ArticleChanges;
		
		private EntitySet<Keyword> _Keywords;
		
		private EntityRef<Rating> _Rating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTextChanging(System.Xml.Linq.XElement value);
    partial void OnTextChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    #endregion
		
		public Article()
		{
			this._ArticleChanges = new EntitySet<ArticleChange>(new Action<ArticleChange>(this.attach_ArticleChanges), new Action<ArticleChange>(this.detach_ArticleChanges));
			this._Keywords = new EntitySet<Keyword>(new Action<Keyword>(this.attach_Keywords), new Action<Keyword>(this.detach_Keywords));
			this._Rating = default(EntityRef<Rating>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Association(Name="Article_ArticleChange", Storage="_ArticleChanges", OtherKey="ArticleId")]
		public EntitySet<ArticleChange> ArticleChanges
		{
			get
			{
				return this._ArticleChanges;
			}
			set
			{
				this._ArticleChanges.Assign(value);
			}
		}
		
		[Association(Name="Article_Keyword", Storage="_Keywords", OtherKey="ArticleId")]
		public EntitySet<Keyword> Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				this._Keywords.Assign(value);
			}
		}
		
		[Association(Name="Rating_Article", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticleChanges(ArticleChange entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_ArticleChanges(ArticleChange entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_Keywords(Keyword entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Keywords(Keyword entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[Table(Name="dbo.Blogs")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private int _UserId;
		
		private string _UrlName;
		
		private string _Name;
		
		private System.DateTime _Timestamp;
		
		private int _ForumId;
		
		private int _RatingId;
		
		private System.Nullable<int> _PictureId;
		
		private string _Description;
		
		private EntitySet<BlogTag> _BlogTags;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Picture> _Picture;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Blog()
		{
			this._BlogTags = new EntitySet<BlogTag>(new Action<BlogTag>(this.attach_BlogTags), new Action<BlogTag>(this.detach_BlogTags));
			this._Forum = default(EntityRef<Forum>);
			this._Picture = default(EntityRef<Picture>);
			this._Rating = default(EntityRef<Rating>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_BlogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_ForumId", DbType="Int NOT NULL")]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Blog_BlogTag", Storage="_BlogTags", OtherKey="BlogId")]
		public EntitySet<BlogTag> BlogTags
		{
			get
			{
				return this._BlogTags;
			}
			set
			{
				this._BlogTags.Assign(value);
			}
		}
		
		[Association(Name="Forum_Blog", Storage="_Forum", ThisKey="ForumId", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._ForumId = value.ForumId;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[Association(Name="Picture_Blog", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[Association(Name="Rating_Blog", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="User_Blog", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogTags(BlogTag entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogTags(BlogTag entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[Table(Name="dbo.BlogTags")]
	public partial class BlogTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private int _TagId;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public BlogTag()
		{
			this._Blog = default(EntityRef<Blog>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Association(Name="Blog_BlogTag", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogTags.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogTags.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[Association(Name="Tag_BlogTag", Storage="_Tag", ThisKey="TagId", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.BlogTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.BlogTags.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Clarifications")]
	public partial class Clarification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClarificationId;
		
		private int _ContestId;
		
		private System.DateTime _Timestamp;
		
		private string _Text;
		
		private EntityRef<Contest> _Contest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClarificationIdChanging(int value);
    partial void OnClarificationIdChanged();
    partial void OnContestIdChanging(int value);
    partial void OnContestIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Clarification()
		{
			this._Contest = default(EntityRef<Contest>);
			OnCreated();
		}
		
		[Column(Storage="_ClarificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClarificationId
		{
			get
			{
				return this._ClarificationId;
			}
			set
			{
				if ((this._ClarificationId != value))
				{
					this.OnClarificationIdChanging(value);
					this.SendPropertyChanging();
					this._ClarificationId = value;
					this.SendPropertyChanged("ClarificationId");
					this.OnClarificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContestId", DbType="Int NOT NULL")]
		public int ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="Contest_Clarification", Storage="_Contest", ThisKey="ContestId", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.Clarifications.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.Clarifications.Add(this);
						this._ContestId = value.ContestId;
					}
					else
					{
						this._ContestId = default(int);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ContestProblems")]
	public partial class ContestProblem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContestId;
		
		private int _ProblemId;
		
		private EntityRef<Contest> _Contest;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContestIdChanging(int value);
    partial void OnContestIdChanged();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    #endregion
		
		public ContestProblem()
		{
			this._Contest = default(EntityRef<Contest>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[Column(Storage="_ContestId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProblemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[Association(Name="Contest_ContestProblem", Storage="_Contest", ThisKey="ContestId", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.ContestProblems.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.ContestProblems.Add(this);
						this._ContestId = value.ContestId;
					}
					else
					{
						this._ContestId = default(int);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		[Association(Name="Problem_ContestProblem", Storage="_Problem", ThisKey="ProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.ContestProblems.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.ContestProblems.Add(this);
						this._ProblemId = value.ProblemId;
					}
					else
					{
						this._ProblemId = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Contests")]
	public partial class Contest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContestId;
		
		private System.Nullable<int> _EntityId;
		
		private System.Nullable<int> _ForumId;
		
		private System.Nullable<int> _UserId;
		
		private string _Name;
		
		private string _UrlName;
		
		private System.DateTime _Timestamp;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private ContestScoring _Scoring;
		
		private ContestStatus _Status;
		
		private ContestScope _Scope;
		
		private int _TeamSize;
		
		private EntitySet<Clarification> _Clarifications;
		
		private EntitySet<ContestProblem> _ContestProblems;
		
		private EntitySet<ContestUser> _ContestUsers;
		
		private EntitySet<Editorial> _Editorials;
		
		private EntitySet<Run> _Runs;
		
		private EntityRef<Affiliation> _Affiliation;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<Forum> _Forum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContestIdChanging(int value);
    partial void OnContestIdChanged();
    partial void OnEntityIdChanging(System.Nullable<int> value);
    partial void OnEntityIdChanged();
    partial void OnForumIdChanging(System.Nullable<int> value);
    partial void OnForumIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnScoringChanging(ContestScoring value);
    partial void OnScoringChanged();
    partial void OnStatusChanging(ContestStatus value);
    partial void OnStatusChanged();
    partial void OnScopeChanging(ContestScope value);
    partial void OnScopeChanged();
    partial void OnTeamSizeChanging(int value);
    partial void OnTeamSizeChanged();
    #endregion
		
		public Contest()
		{
			this._Clarifications = new EntitySet<Clarification>(new Action<Clarification>(this.attach_Clarifications), new Action<Clarification>(this.detach_Clarifications));
			this._ContestProblems = new EntitySet<ContestProblem>(new Action<ContestProblem>(this.attach_ContestProblems), new Action<ContestProblem>(this.detach_ContestProblems));
			this._ContestUsers = new EntitySet<ContestUser>(new Action<ContestUser>(this.attach_ContestUsers), new Action<ContestUser>(this.detach_ContestUsers));
			this._Editorials = new EntitySet<Editorial>(new Action<Editorial>(this.attach_Editorials), new Action<Editorial>(this.detach_Editorials));
			this._Runs = new EntitySet<Run>(new Action<Run>(this.attach_Runs), new Action<Run>(this.detach_Runs));
			this._Affiliation = default(EntityRef<Affiliation>);
			this._Entity = default(EntityRef<Entity>);
			this._Forum = default(EntityRef<Forum>);
			OnCreated();
		}
		
		[Column(Storage="_ContestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntityId", DbType="Int")]
		public System.Nullable<int> EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Affiliation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForumId", DbType="Int")]
		public System.Nullable<int> ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Scoring", DbType="Int NOT NULL", CanBeNull=false)]
		public ContestScoring Scoring
		{
			get
			{
				return this._Scoring;
			}
			set
			{
				if ((this._Scoring != value))
				{
					this.OnScoringChanging(value);
					this.SendPropertyChanging();
					this._Scoring = value;
					this.SendPropertyChanged("Scoring");
					this.OnScoringChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public ContestStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Scope", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public ContestScope Scope
		{
			get
			{
				return this._Scope;
			}
			set
			{
				if ((this._Scope != value))
				{
					this.OnScopeChanging(value);
					this.SendPropertyChanging();
					this._Scope = value;
					this.SendPropertyChanged("Scope");
					this.OnScopeChanged();
				}
			}
		}
		
		[Column(Storage="_TeamSize", DbType="Int NOT NULL")]
		public int TeamSize
		{
			get
			{
				return this._TeamSize;
			}
			set
			{
				if ((this._TeamSize != value))
				{
					this.OnTeamSizeChanging(value);
					this.SendPropertyChanging();
					this._TeamSize = value;
					this.SendPropertyChanged("TeamSize");
					this.OnTeamSizeChanged();
				}
			}
		}
		
		[Association(Name="Contest_Clarification", Storage="_Clarifications", OtherKey="ContestId")]
		public EntitySet<Clarification> Clarifications
		{
			get
			{
				return this._Clarifications;
			}
			set
			{
				this._Clarifications.Assign(value);
			}
		}
		
		[Association(Name="Contest_ContestProblem", Storage="_ContestProblems", OtherKey="ContestId")]
		public EntitySet<ContestProblem> ContestProblems
		{
			get
			{
				return this._ContestProblems;
			}
			set
			{
				this._ContestProblems.Assign(value);
			}
		}
		
		[Association(Name="Contest_ContestUser", Storage="_ContestUsers", OtherKey="ContestId")]
		public EntitySet<ContestUser> ContestUsers
		{
			get
			{
				return this._ContestUsers;
			}
			set
			{
				this._ContestUsers.Assign(value);
			}
		}
		
		[Association(Name="Contest_Editorial", Storage="_Editorials", OtherKey="ContestId")]
		public EntitySet<Editorial> Editorials
		{
			get
			{
				return this._Editorials;
			}
			set
			{
				this._Editorials.Assign(value);
			}
		}
		
		[Association(Name="Contest_Run", Storage="_Runs", OtherKey="ContestId")]
		public EntitySet<Run> Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				this._Runs.Assign(value);
			}
		}
		
		[Association(Name="Affiliation_Contest", Storage="_Affiliation", ThisKey="EntityId", IsForeignKey=true)]
		public Affiliation Affiliation
		{
			get
			{
				return this._Affiliation.Entity;
			}
			set
			{
				Affiliation previousValue = this._Affiliation.Entity;
				if (((previousValue != value) 
							|| (this._Affiliation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Affiliation.Entity = null;
						previousValue.Contests.Remove(this);
					}
					this._Affiliation.Entity = value;
					if ((value != null))
					{
						value.Contests.Add(this);
						this._EntityId = value.AffiliationId;
					}
					else
					{
						this._EntityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Affiliation");
				}
			}
		}
		
		[Association(Name="Entity_Contest", Storage="_Entity", ThisKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.Contests.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.Contests.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[Association(Name="Forum_Contest", Storage="_Forum", ThisKey="ForumId", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Contests.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Contests.Add(this);
						this._ForumId = value.ForumId;
					}
					else
					{
						this._ForumId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clarifications(Clarification entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_Clarifications(Clarification entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
		
		private void attach_ContestProblems(ContestProblem entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_ContestProblems(ContestProblem entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
		
		private void attach_ContestUsers(ContestUser entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_ContestUsers(ContestUser entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
		
		private void attach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
		
		private void attach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
	}
	
	[Table(Name="dbo.ContestUsers")]
	public partial class ContestUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContestId;
		
		private int _UserId;
		
		private System.Nullable<int> _TeamId;
		
		private System.Nullable<int> _Rank;
		
		private System.Nullable<int> _Points;
		
		private EntityRef<Contest> _Contest;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContestIdChanging(int value);
    partial void OnContestIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTeamIdChanging(System.Nullable<int> value);
    partial void OnTeamIdChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnPointsChanging(System.Nullable<int> value);
    partial void OnPointsChanged();
    #endregion
		
		public ContestUser()
		{
			this._Contest = default(EntityRef<Contest>);
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ContestId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_TeamId", DbType="Int")]
		public System.Nullable<int> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rank", DbType="Int")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Association(Name="Contest_ContestUser", Storage="_Contest", ThisKey="ContestId", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.ContestUsers.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.ContestUsers.Add(this);
						this._ContestId = value.ContestId;
					}
					else
					{
						this._ContestId = default(int);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		[Association(Name="Team_ContestUser", Storage="_Team", ThisKey="TeamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.ContestUsers.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.ContestUsers.Add(this);
						this._TeamId = value.TeamId;
					}
					else
					{
						this._TeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="User_ContestUser", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ContestUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ContestUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _Name;
		
		private System.Nullable<int> _PictureId;
		
		private EntitySet<Entity> _Entities;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    #endregion
		
		public Country()
		{
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Association(Name="Country_Entity", Storage="_Entities", OtherKey="CountryId")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		[Association(Name="Country_User", Storage="_Users", OtherKey="CountryId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Picture_Country", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Editorials")]
	public partial class Editorial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EditorialId;
		
		private int _ContestId;
		
		private int _UserId;
		
		private System.DateTime _Timestamp;
		
		private int _TopicId;
		
		private int _RatingId;
		
		private string _Text;
		
		private EntityRef<Contest> _Contest;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEditorialIdChanging(int value);
    partial void OnEditorialIdChanged();
    partial void OnContestIdChanging(int value);
    partial void OnContestIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Editorial()
		{
			this._Contest = default(EntityRef<Contest>);
			this._Rating = default(EntityRef<Rating>);
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EditorialId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EditorialId
		{
			get
			{
				return this._EditorialId;
			}
			set
			{
				if ((this._EditorialId != value))
				{
					this.OnEditorialIdChanging(value);
					this.SendPropertyChanging();
					this._EditorialId = value;
					this.SendPropertyChanged("EditorialId");
					this.OnEditorialIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContestId", DbType="Int NOT NULL")]
		public int ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="Contest_Editorial", Storage="_Contest", ThisKey="ContestId", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.Editorials.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.Editorials.Add(this);
						this._ContestId = value.ContestId;
					}
					else
					{
						this._ContestId = default(int);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		[Association(Name="Rating_Editorial", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Editorials.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Editorials.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="Topic_Editorial", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Editorials.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Editorials.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_Editorial", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Editorials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Editorials.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Entities")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityId;
		
		private int _CountryId;
		
		private int _TopicId;
		
		private System.Nullable<int> _PictureId;
		
		private string _Domain;
		
		private string _Name;
		
		private int _GlobalRank;
		
		private EntityType _Type;
		
		private int _Points;
		
		private EntitySet<Affiliation> _Affiliations;
		
		private EntitySet<Contest> _Contests;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Picture> _Picture;
		
		private EntityRef<Topic> _Topic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGlobalRankChanging(int value);
    partial void OnGlobalRankChanged();
    partial void OnTypeChanging(EntityType value);
    partial void OnTypeChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public Entity()
		{
			this._Affiliations = new EntitySet<Affiliation>(new Action<Affiliation>(this.attach_Affiliations), new Action<Affiliation>(this.detach_Affiliations));
			this._Contests = new EntitySet<Contest>(new Action<Contest>(this.attach_Contests), new Action<Contest>(this.detach_Contests));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Country = default(EntityRef<Country>);
			this._Picture = default(EntityRef<Picture>);
			this._Topic = default(EntityRef<Topic>);
			OnCreated();
		}
		
		[Column(Storage="_EntityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_GlobalRank", DbType="Int NOT NULL")]
		public int GlobalRank
		{
			get
			{
				return this._GlobalRank;
			}
			set
			{
				if ((this._GlobalRank != value))
				{
					this.OnGlobalRankChanging(value);
					this.SendPropertyChanging();
					this._GlobalRank = value;
					this.SendPropertyChanged("GlobalRank");
					this.OnGlobalRankChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public EntityType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="INT NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Association(Name="Entity_Affiliation", Storage="_Affiliations", OtherKey="EntityId")]
		public EntitySet<Affiliation> Affiliations
		{
			get
			{
				return this._Affiliations;
			}
			set
			{
				this._Affiliations.Assign(value);
			}
		}
		
		[Association(Name="Entity_Contest", Storage="_Contests", OtherKey="EntityId")]
		public EntitySet<Contest> Contests
		{
			get
			{
				return this._Contests;
			}
			set
			{
				this._Contests.Assign(value);
			}
		}
		
		[Association(Name="Entity_Event", Storage="_Events", OtherKey="EntityId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="Country_Entity", Storage="_Country", ThisKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Picture_Entity", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[Association(Name="Topic_Entity", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Affiliations(Affiliation entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_Affiliations(Affiliation entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_Contests(Contest entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_Contests(Contest entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
	}
	
	[Table(Name="dbo.EventInvitations")]
	public partial class EventInvitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private int _UserId;
		
		private byte _Status;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public EventInvitation()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Event_EventInvitation", Storage="_Event", ThisKey="EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventInvitations.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventInvitations.Add(this);
						this._EventId = value.EventId;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="User_EventInvitation", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventInvitations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventInvitations.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private int _UserId;
		
		private System.Nullable<int> _TeamId;
		
		private System.Nullable<int> _EntityId;
		
		private int _TopicId;
		
		private System.DateTime _Timestamp;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private string _Host;
		
		private string _Location;
		
		private string _Description;
		
		private System.Nullable<int> _PictureId;
		
		private EntitySet<EventInvitation> _EventInvitations;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<Picture> _Picture;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTeamIdChanging(System.Nullable<int> value);
    partial void OnTeamIdChanged();
    partial void OnEntityIdChanging(System.Nullable<int> value);
    partial void OnEntityIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    #endregion
		
		public Event()
		{
			this._EventInvitations = new EntitySet<EventInvitation>(new Action<EventInvitation>(this.attach_EventInvitations), new Action<EventInvitation>(this.detach_EventInvitations));
			this._Entity = default(EntityRef<Entity>);
			this._Picture = default(EntityRef<Picture>);
			this._Team = default(EntityRef<Team>);
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_TeamId", DbType="Int")]
		public System.Nullable<int> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntityId", DbType="Int")]
		public System.Nullable<int> EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Host", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Association(Name="Event_EventInvitation", Storage="_EventInvitations", OtherKey="EventId")]
		public EntitySet<EventInvitation> EventInvitations
		{
			get
			{
				return this._EventInvitations;
			}
			set
			{
				this._EventInvitations.Assign(value);
			}
		}
		
		[Association(Name="Entity_Event", Storage="_Entity", ThisKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[Association(Name="Picture_Event", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[Association(Name="Team_Event", Storage="_Team", ThisKey="TeamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._TeamId = value.TeamId;
					}
					else
					{
						this._TeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="Topic_Event", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_Event", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventInvitations(EventInvitation entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventInvitations(EventInvitation entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[Table(Name="dbo.ForumCategories")]
	public partial class ForumCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Title;
		
		private bool _Visible;
		
		private string _Description;
		
		private EntitySet<Forum> _Forums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ForumCategory()
		{
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			OnCreated();
		}
		
		[Column(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="ForumCategory_Forum", Storage="_Forums", OtherKey="CategoryId")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.ForumCategory = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.ForumCategory = null;
		}
	}
	
	[Table(Name="dbo.Forums")]
	public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumId;
		
		private int _CategoryId;
		
		private string _Title;
		
		private bool _Visible;
		
		private System.DateTime _Timestamp;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<Contest> _Contests;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Topic> _Topics;
		
		private EntityRef<ForumCategory> _ForumCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public Forum()
		{
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._Contests = new EntitySet<Contest>(new Action<Contest>(this.attach_Contests), new Action<Contest>(this.detach_Contests));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			this._ForumCategory = default(EntityRef<ForumCategory>);
			OnCreated();
		}
		
		[Column(Storage="_ForumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._ForumCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Forum_Blog", Storage="_Blogs", OtherKey="ForumId")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[Association(Name="Forum_Contest", Storage="_Contests", OtherKey="ForumId")]
		public EntitySet<Contest> Contests
		{
			get
			{
				return this._Contests;
			}
			set
			{
				this._Contests.Assign(value);
			}
		}
		
		[Association(Name="Forum_Problem", Storage="_Problems", OtherKey="ForumId")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[Association(Name="Forum_Topic", Storage="_Topics", OtherKey="ForumId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[Association(Name="ForumCategory_Forum", Storage="_ForumCategory", ThisKey="CategoryId", IsForeignKey=true)]
		public ForumCategory ForumCategory
		{
			get
			{
				return this._ForumCategory.Entity;
			}
			set
			{
				ForumCategory previousValue = this._ForumCategory.Entity;
				if (((previousValue != value) 
							|| (this._ForumCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumCategory.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._ForumCategory.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("ForumCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Contests(Contest entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Contests(Contest entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
	}
	
	[Table(Name="dbo.Friends")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _FriendId;
		
		private FriendStatus _Status;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFriendIdChanging(int value);
    partial void OnFriendIdChanged();
    partial void OnStatusChanging(FriendStatus value);
    partial void OnStatusChanged();
    #endregion
		
		public Friend()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_FriendId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FriendId
		{
			get
			{
				return this._FriendId;
			}
			set
			{
				if ((this._FriendId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriendIdChanging(value);
					this.SendPropertyChanging();
					this._FriendId = value;
					this.SendPropertyChanged("FriendId");
					this.OnFriendIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public FriendStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="User_Friend", Storage="_User", ThisKey="FriendId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friends.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friends.Add(this);
						this._FriendId = value.UserId;
					}
					else
					{
						this._FriendId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_Friend1", Storage="_User1", ThisKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Friends1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Friends1.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Keywords")]
	public partial class Keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemId;
		
		private int _ArticleId;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    #endregion
		
		public Keyword()
		{
			this._Article = default(EntityRef<Article>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[Column(Storage="_ProblemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[Column(Storage="_ArticleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[Association(Name="Article_Keyword", Storage="_Article", ThisKey="ArticleId", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Keywords.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Keywords.Add(this);
						this._ArticleId = value.ArticleId;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[Association(Name="Problem_Keyword", Storage="_Problem", ThisKey="ProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Keywords.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Keywords.Add(this);
						this._ProblemId = value.ProblemId;
					}
					else
					{
						this._ProblemId = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Languages")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageId;
		
		private string _Name;
		
		private string _XmlFile;
		
		private string _DefaultFile;
		
		private string _SourceId;
		
		private bool _Visible;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Problem> _Problems1;
		
		private EntitySet<ProblemSubmission> _ProblemSubmissions;
		
		private EntitySet<Run> _Runs;
		
		private EntitySet<User> _Users;
		
		private EntitySet<CodeSnippet> _CodeSnippets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnXmlFileChanging(string value);
    partial void OnXmlFileChanged();
    partial void OnDefaultFileChanging(string value);
    partial void OnDefaultFileChanged();
    partial void OnSourceIdChanging(string value);
    partial void OnSourceIdChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
		
		public Language()
		{
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Problems1 = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems1), new Action<Problem>(this.detach_Problems1));
			this._ProblemSubmissions = new EntitySet<ProblemSubmission>(new Action<ProblemSubmission>(this.attach_ProblemSubmissions), new Action<ProblemSubmission>(this.detach_ProblemSubmissions));
			this._Runs = new EntitySet<Run>(new Action<Run>(this.attach_Runs), new Action<Run>(this.detach_Runs));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._CodeSnippets = new EntitySet<CodeSnippet>(new Action<CodeSnippet>(this.attach_CodeSnippets), new Action<CodeSnippet>(this.detach_CodeSnippets));
			OnCreated();
		}
		
		[Column(Storage="_LanguageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_XmlFile", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string XmlFile
		{
			get
			{
				return this._XmlFile;
			}
			set
			{
				if ((this._XmlFile != value))
				{
					this.OnXmlFileChanging(value);
					this.SendPropertyChanging();
					this._XmlFile = value;
					this.SendPropertyChanged("XmlFile");
					this.OnXmlFileChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultFile", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string DefaultFile
		{
			get
			{
				return this._DefaultFile;
			}
			set
			{
				if ((this._DefaultFile != value))
				{
					this.OnDefaultFileChanging(value);
					this.SendPropertyChanging();
					this._DefaultFile = value;
					this.SendPropertyChanged("DefaultFile");
					this.OnDefaultFileChanged();
				}
			}
		}
		
		[Column(Storage="_SourceId", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string SourceId
		{
			get
			{
				return this._SourceId;
			}
			set
			{
				if ((this._SourceId != value))
				{
					this.OnSourceIdChanging(value);
					this.SendPropertyChanging();
					this._SourceId = value;
					this.SendPropertyChanged("SourceId");
					this.OnSourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Association(Name="Language_Problem", Storage="_Problems", OtherKey="SolutionLanguageId")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[Association(Name="Language_Problem1", Storage="_Problems1", OtherKey="SpecialJudgeLanguageId")]
		public EntitySet<Problem> Problems1
		{
			get
			{
				return this._Problems1;
			}
			set
			{
				this._Problems1.Assign(value);
			}
		}
		
		[Association(Name="Language_ProblemSubmission", Storage="_ProblemSubmissions", OtherKey="LanguageId")]
		public EntitySet<ProblemSubmission> ProblemSubmissions
		{
			get
			{
				return this._ProblemSubmissions;
			}
			set
			{
				this._ProblemSubmissions.Assign(value);
			}
		}
		
		[Association(Name="Language_Run", Storage="_Runs", OtherKey="LanguageId")]
		public EntitySet<Run> Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				this._Runs.Assign(value);
			}
		}
		
		[Association(Name="Language_User", Storage="_Users", OtherKey="LanguageId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Language_CodeSnippet", Storage="_CodeSnippets", OtherKey="LanguageId")]
		public EntitySet<CodeSnippet> CodeSnippets
		{
			get
			{
				return this._CodeSnippets;
			}
			set
			{
				this._CodeSnippets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Problems1(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Language1 = this;
		}
		
		private void detach_Problems1(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Language1 = null;
		}
		
		private void attach_ProblemSubmissions(ProblemSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_ProblemSubmissions(ProblemSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[Table(Name="dbo.News")]
	public partial class News : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsId;
		
		private string _Title;
		
		private string _UrlName;
		
		private string _NewsLink;
		
		private string _Text;
		
		private System.DateTime _Timestamp;
		
		private int _RatingId;
		
		private byte _Type;
		
		private System.Nullable<int> _PictureId;
		
		private EntityRef<Picture> _Picture;
		
		private EntityRef<Rating> _Rating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIdChanging(int value);
    partial void OnNewsIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnNewsLinkChanging(string value);
    partial void OnNewsLinkChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    #endregion
		
		public News()
		{
			this._Picture = default(EntityRef<Picture>);
			this._Rating = default(EntityRef<Rating>);
			OnCreated();
		}
		
		[Column(Storage="_NewsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsId
		{
			get
			{
				return this._NewsId;
			}
			set
			{
				if ((this._NewsId != value))
				{
					this.OnNewsIdChanging(value);
					this.SendPropertyChanging();
					this._NewsId = value;
					this.SendPropertyChanged("NewsId");
					this.OnNewsIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Column(Storage="_NewsLink", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string NewsLink
		{
			get
			{
				return this._NewsLink;
			}
			set
			{
				if ((this._NewsLink != value))
				{
					this.OnNewsLinkChanging(value);
					this.SendPropertyChanging();
					this._NewsLink = value;
					this.SendPropertyChanged("NewsLink");
					this.OnNewsLinkChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Association(Name="Picture_News", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.News.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[Association(Name="Rating_News", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.News.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NewsFeed")]
	public partial class NewsFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsFeedId;
		
		private System.Nullable<int> _UserId;
		
		private NewsFeedType _Type;
		
		private string _Parameters;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsFeedIdChanging(int value);
    partial void OnNewsFeedIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnTypeChanging(NewsFeedType value);
    partial void OnTypeChanged();
    partial void OnParametersChanging(string value);
    partial void OnParametersChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public NewsFeed()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_NewsFeedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsFeedId
		{
			get
			{
				return this._NewsFeedId;
			}
			set
			{
				if ((this._NewsFeedId != value))
				{
					this.OnNewsFeedIdChanging(value);
					this.SendPropertyChanging();
					this._NewsFeedId = value;
					this.SendPropertyChanged("NewsFeedId");
					this.OnNewsFeedIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public NewsFeedType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Parameters", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="User_NewsFeed", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NewsFeeds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NewsFeeds.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Newsletters")]
	public partial class Newsletter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsletterId;
		
		private System.DateTime _Timestamp;
		
		private System.Xml.Linq.XElement _Html;
		
		private string _Plain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsletterIdChanging(int value);
    partial void OnNewsletterIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnHtmlChanging(System.Xml.Linq.XElement value);
    partial void OnHtmlChanged();
    partial void OnPlainChanging(string value);
    partial void OnPlainChanged();
    #endregion
		
		public Newsletter()
		{
			OnCreated();
		}
		
		[Column(Storage="_NewsletterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsletterId
		{
			get
			{
				return this._NewsletterId;
			}
			set
			{
				if ((this._NewsletterId != value))
				{
					this.OnNewsletterIdChanging(value);
					this.SendPropertyChanging();
					this._NewsletterId = value;
					this.SendPropertyChanged("NewsletterId");
					this.OnNewsletterIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Html", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Html
		{
			get
			{
				return this._Html;
			}
			set
			{
				if ((this._Html != value))
				{
					this.OnHtmlChanging(value);
					this.SendPropertyChanging();
					this._Html = value;
					this.SendPropertyChanged("Html");
					this.OnHtmlChanged();
				}
			}
		}
		
		[Column(Storage="_Plain", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Plain
		{
			get
			{
				return this._Plain;
			}
			set
			{
				if ((this._Plain != value))
				{
					this.OnPlainChanging(value);
					this.SendPropertyChanging();
					this._Plain = value;
					this.SendPropertyChanged("Plain");
					this.OnPlainChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Notifications")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationId;
		
		private int _UserId;
		
		private string _Text;
		
		private string _Link;
		
		private NotificationType _Type;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnTypeChanging(NotificationType value);
    partial void OnTypeChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public Notification()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Link", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public NotificationType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="User_Notification", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Pictures")]
	public partial class Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureId;
		
		private string _Title;
		
		private System.Data.Linq.Binary _Data;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<Country> _Countries;
		
		private EntitySet<Entity> _Entities;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<News> _News;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureIdChanging(int value);
    partial void OnPictureIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public Picture()
		{
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._News = new EntitySet<News>(new Action<News>(this.attach_News), new Action<News>(this.detach_News));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_PictureId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="Picture_Blog", Storage="_Blogs", OtherKey="PictureId")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[Association(Name="Picture_Country", Storage="_Countries", OtherKey="PictureId")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		[Association(Name="Picture_Entity", Storage="_Entities", OtherKey="PictureId")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		[Association(Name="Picture_Event", Storage="_Events", OtherKey="PictureId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="Picture_News", Storage="_News", OtherKey="PictureId")]
		public EntitySet<News> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[Association(Name="Picture_Team", Storage="_Teams", OtherKey="PictureId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[Association(Name="Picture_User", Storage="_Users", OtherKey="PictureId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
	}
	
	[Table(Name="dbo.Posts")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostId;
		
		private int _TopicId;
		
		private int _UserId;
		
		private int _RatingId;
		
		private System.DateTime _Timestamp;
		
		private string _Title;
		
		private bool _Visible;
		
		private string _Message;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIdChanging(int value);
    partial void OnPostIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public Post()
		{
			this._Rating = default(EntityRef<Rating>);
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PostId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostId
		{
			get
			{
				return this._PostId;
			}
			set
			{
				if ((this._PostId != value))
				{
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._PostId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Association(Name="Rating_Post", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="Topic_Post", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_Post", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Problems")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemId;
		
		private int _SourceId;
		
		private System.Nullable<int> _UserId;
		
		private int _ForumId;
		
		private int _RatingId;
		
		private ProblemType _Type;
		
		private string _Name;
		
		private string _UrlName;
		
		private System.Data.Linq.Link<System.Xml.Linq.XElement> _Statement;
		
		private System.DateTime _Timestamp;
		
		private bool _Visible;
		
		private string _Solution;
		
		private System.Nullable<int> _SolutionLanguageId;
		
		private string _SpecialJudge;
		
		private System.Nullable<int> _SpecialJudgeLanguageId;
		
		private EntitySet<ContestProblem> _ContestProblems;
		
		private EntitySet<Keyword> _Keywords;
		
		private EntitySet<ProblemTag> _ProblemTags;
		
		private EntitySet<Run> _Runs;
		
		private EntitySet<TestCase> _TestCases;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Language> _Language1;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<Source> _Source;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnSourceIdChanging(int value);
    partial void OnSourceIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnTypeChanging(ProblemType value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnStatementChanging(System.Xml.Linq.XElement value);
    partial void OnStatementChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnSolutionLanguageIdChanging(System.Nullable<int> value);
    partial void OnSolutionLanguageIdChanged();
    partial void OnSpecialJudgeChanging(string value);
    partial void OnSpecialJudgeChanged();
    partial void OnSpecialJudgeLanguageIdChanging(System.Nullable<int> value);
    partial void OnSpecialJudgeLanguageIdChanged();
    #endregion
		
		public Problem()
		{
			this._ContestProblems = new EntitySet<ContestProblem>(new Action<ContestProblem>(this.attach_ContestProblems), new Action<ContestProblem>(this.detach_ContestProblems));
			this._Keywords = new EntitySet<Keyword>(new Action<Keyword>(this.attach_Keywords), new Action<Keyword>(this.detach_Keywords));
			this._ProblemTags = new EntitySet<ProblemTag>(new Action<ProblemTag>(this.attach_ProblemTags), new Action<ProblemTag>(this.detach_ProblemTags));
			this._Runs = new EntitySet<Run>(new Action<Run>(this.attach_Runs), new Action<Run>(this.detach_Runs));
			this._TestCases = new EntitySet<TestCase>(new Action<TestCase>(this.attach_TestCases), new Action<TestCase>(this.detach_TestCases));
			this._Forum = default(EntityRef<Forum>);
			this._Language = default(EntityRef<Language>);
			this._Language1 = default(EntityRef<Language>);
			this._Rating = default(EntityRef<Rating>);
			this._Source = default(EntityRef<Source>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ProblemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[Column(Storage="_SourceId", DbType="Int NOT NULL")]
		public int SourceId
		{
			get
			{
				return this._SourceId;
			}
			set
			{
				if ((this._SourceId != value))
				{
					if (this._Source.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceIdChanging(value);
					this.SendPropertyChanging();
					this._SourceId = value;
					this.SendPropertyChanged("SourceId");
					this.OnSourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForumId", DbType="Int NOT NULL")]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public ProblemType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Column(Storage="_Statement", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Statement
		{
			get
			{
				return this._Statement.Value;
			}
			set
			{
				if ((this._Statement.Value != value))
				{
					this.OnStatementChanging(value);
					this.SendPropertyChanging();
					this._Statement.Value = value;
					this.SendPropertyChanged("Statement");
					this.OnStatementChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_Solution", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_SolutionLanguageId", DbType="Int")]
		public System.Nullable<int> SolutionLanguageId
		{
			get
			{
				return this._SolutionLanguageId;
			}
			set
			{
				if ((this._SolutionLanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSolutionLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._SolutionLanguageId = value;
					this.SendPropertyChanged("SolutionLanguageId");
					this.OnSolutionLanguageIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialJudge", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SpecialJudge
		{
			get
			{
				return this._SpecialJudge;
			}
			set
			{
				if ((this._SpecialJudge != value))
				{
					this.OnSpecialJudgeChanging(value);
					this.SendPropertyChanging();
					this._SpecialJudge = value;
					this.SendPropertyChanged("SpecialJudge");
					this.OnSpecialJudgeChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialJudgeLanguageId", DbType="Int")]
		public System.Nullable<int> SpecialJudgeLanguageId
		{
			get
			{
				return this._SpecialJudgeLanguageId;
			}
			set
			{
				if ((this._SpecialJudgeLanguageId != value))
				{
					if (this._Language1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialJudgeLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialJudgeLanguageId = value;
					this.SendPropertyChanged("SpecialJudgeLanguageId");
					this.OnSpecialJudgeLanguageIdChanged();
				}
			}
		}
		
		[Association(Name="Problem_ContestProblem", Storage="_ContestProblems", OtherKey="ProblemId")]
		public EntitySet<ContestProblem> ContestProblems
		{
			get
			{
				return this._ContestProblems;
			}
			set
			{
				this._ContestProblems.Assign(value);
			}
		}
		
		[Association(Name="Problem_Keyword", Storage="_Keywords", OtherKey="ProblemId")]
		public EntitySet<Keyword> Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				this._Keywords.Assign(value);
			}
		}
		
		[Association(Name="Problem_ProblemTag", Storage="_ProblemTags", OtherKey="ProblemId")]
		public EntitySet<ProblemTag> ProblemTags
		{
			get
			{
				return this._ProblemTags;
			}
			set
			{
				this._ProblemTags.Assign(value);
			}
		}
		
		[Association(Name="Problem_Run", Storage="_Runs", OtherKey="ProblemId")]
		public EntitySet<Run> Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				this._Runs.Assign(value);
			}
		}
		
		[Association(Name="Problem_TestCase", Storage="_TestCases", OtherKey="ProblemId")]
		public EntitySet<TestCase> TestCases
		{
			get
			{
				return this._TestCases;
			}
			set
			{
				this._TestCases.Assign(value);
			}
		}
		
		[Association(Name="Forum_Problem", Storage="_Forum", ThisKey="ForumId", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._ForumId = value.ForumId;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[Association(Name="Language_Problem", Storage="_Language", ThisKey="SolutionLanguageId", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._SolutionLanguageId = value.LanguageId;
					}
					else
					{
						this._SolutionLanguageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="Language_Problem1", Storage="_Language1", ThisKey="SpecialJudgeLanguageId", IsForeignKey=true)]
		public Language Language1
		{
			get
			{
				return this._Language1.Entity;
			}
			set
			{
				Language previousValue = this._Language1.Entity;
				if (((previousValue != value) 
							|| (this._Language1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language1.Entity = null;
						previousValue.Problems1.Remove(this);
					}
					this._Language1.Entity = value;
					if ((value != null))
					{
						value.Problems1.Add(this);
						this._SpecialJudgeLanguageId = value.LanguageId;
					}
					else
					{
						this._SpecialJudgeLanguageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Language1");
				}
			}
		}
		
		[Association(Name="Rating_Problem", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="Source_Problem", Storage="_Source", ThisKey="SourceId", IsForeignKey=true)]
		public Source Source
		{
			get
			{
				return this._Source.Entity;
			}
			set
			{
				Source previousValue = this._Source.Entity;
				if (((previousValue != value) 
							|| (this._Source.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Source.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Source.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._SourceId = value.SourceId;
					}
					else
					{
						this._SourceId = default(int);
					}
					this.SendPropertyChanged("Source");
				}
			}
		}
		
		[Association(Name="User_Problem", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContestProblems(ContestProblem entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_ContestProblems(ContestProblem entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_Keywords(Keyword entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Keywords(Keyword entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_ProblemTags(ProblemTag entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_ProblemTags(ProblemTag entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_TestCases(TestCase entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_TestCases(TestCase entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
	}
	
	[Table(Name="dbo.ProblemSubmissions")]
	public partial class ProblemSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemSubmissionId;
		
		private int _UserId;
		
		private int _LanguageId;
		
		private string _Solution;
		
		private System.Xml.Linq.XElement _Submission;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemSubmissionIdChanging(int value);
    partial void OnProblemSubmissionIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnSubmissionChanging(System.Xml.Linq.XElement value);
    partial void OnSubmissionChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public ProblemSubmission()
		{
			this._Language = default(EntityRef<Language>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ProblemSubmissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemSubmissionId
		{
			get
			{
				return this._ProblemSubmissionId;
			}
			set
			{
				if ((this._ProblemSubmissionId != value))
				{
					this.OnProblemSubmissionIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemSubmissionId = value;
					this.SendPropertyChanged("ProblemSubmissionId");
					this.OnProblemSubmissionIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageId", DbType="Int NOT NULL")]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Solution", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_Submission", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Submission
		{
			get
			{
				return this._Submission;
			}
			set
			{
				if ((this._Submission != value))
				{
					this.OnSubmissionChanging(value);
					this.SendPropertyChanging();
					this._Submission = value;
					this.SendPropertyChanged("Submission");
					this.OnSubmissionChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Language_ProblemSubmission", Storage="_Language", ThisKey="LanguageId", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.ProblemSubmissions.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.ProblemSubmissions.Add(this);
						this._LanguageId = value.LanguageId;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="User_ProblemSubmission", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProblemSubmissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProblemSubmissions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProblemTags")]
	public partial class ProblemTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _ProblemId;
		
		private int _TagId;
		
		private EntityRef<Problem> _Problem;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public ProblemTag()
		{
			this._Problem = default(EntityRef<Problem>);
			this._Tag = default(EntityRef<Tag>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProblemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Association(Name="Problem_ProblemTag", Storage="_Problem", ThisKey="ProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.ProblemTags.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.ProblemTags.Add(this);
						this._ProblemId = value.ProblemId;
					}
					else
					{
						this._ProblemId = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		[Association(Name="Tag_ProblemTag", Storage="_Tag", ThisKey="TagId", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.ProblemTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.ProblemTags.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[Association(Name="User_ProblemTag", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProblemTags.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProblemTags.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Ratings")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingId;
		
		private int _Count;
		
		private int _Sum;
		
		private EntitySet<Article> _Articles;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<Editorial> _Editorials;
		
		private EntitySet<News> _News;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Run> _Runs;
		
		private EntitySet<UserRating> _UserRatings;
		
		private EntitySet<CodeSnippet> _CodeSnippets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnSumChanging(int value);
    partial void OnSumChanged();
    #endregion
		
		public Rating()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._Editorials = new EntitySet<Editorial>(new Action<Editorial>(this.attach_Editorials), new Action<Editorial>(this.detach_Editorials));
			this._News = new EntitySet<News>(new Action<News>(this.attach_News), new Action<News>(this.detach_News));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Runs = new EntitySet<Run>(new Action<Run>(this.attach_Runs), new Action<Run>(this.detach_Runs));
			this._UserRatings = new EntitySet<UserRating>(new Action<UserRating>(this.attach_UserRatings), new Action<UserRating>(this.detach_UserRatings));
			this._CodeSnippets = new EntitySet<CodeSnippet>(new Action<CodeSnippet>(this.attach_CodeSnippets), new Action<CodeSnippet>(this.detach_CodeSnippets));
			OnCreated();
		}
		
		[Column(Storage="_RatingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_Sum", DbType="Int NOT NULL")]
		public int Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[Association(Name="Rating_Article", Storage="_Articles", OtherKey="RatingId")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[Association(Name="Rating_Blog", Storage="_Blogs", OtherKey="RatingId")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[Association(Name="Rating_Editorial", Storage="_Editorials", OtherKey="RatingId")]
		public EntitySet<Editorial> Editorials
		{
			get
			{
				return this._Editorials;
			}
			set
			{
				this._Editorials.Assign(value);
			}
		}
		
		[Association(Name="Rating_News", Storage="_News", OtherKey="RatingId")]
		public EntitySet<News> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[Association(Name="Rating_Post", Storage="_Posts", OtherKey="RatingId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="Rating_Problem", Storage="_Problems", OtherKey="RatingId")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[Association(Name="Rating_Run", Storage="_Runs", OtherKey="RatingId")]
		public EntitySet<Run> Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				this._Runs.Assign(value);
			}
		}
		
		[Association(Name="Rating_UserRating", Storage="_UserRatings", OtherKey="RatingId")]
		public EntitySet<UserRating> UserRatings
		{
			get
			{
				return this._UserRatings;
			}
			set
			{
				this._UserRatings.Assign(value);
			}
		}
		
		[Association(Name="Rating_CodeSnippet", Storage="_CodeSnippets", OtherKey="RatingId")]
		public EntitySet<CodeSnippet> CodeSnippets
		{
			get
			{
				return this._CodeSnippets;
			}
			set
			{
				this._CodeSnippets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_UserRatings(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_UserRatings(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
		
		private void attach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
	}
	
	[Table(Name="dbo.Runs")]
	public partial class Run : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RunId;
		
		private int _UserId;
		
		private int _ProblemId;
		
		private System.Nullable<int> _TopicId;
		
		private System.Nullable<int> _RatingId;
		
		private RunStatus _Status;
		
		private System.Nullable<int> _Memory;
		
		private System.Nullable<int> _ExecutionTime;
		
		private System.DateTime _Timestamp;
		
		private int _LanguageId;
		
		private int _Size;
		
		private string _Code;
		
		private System.Nullable<int> _Points;
		
		private System.Nullable<int> _ContestId;
		
		private string _Error;
		
		private RunType _Type;
		
		private EntitySet<TestRun> _TestRuns;
		
		private EntityRef<Contest> _Contest;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Problem> _Problem;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRunIdChanging(int value);
    partial void OnRunIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnTopicIdChanging(System.Nullable<int> value);
    partial void OnTopicIdChanged();
    partial void OnRatingIdChanging(System.Nullable<int> value);
    partial void OnRatingIdChanged();
    partial void OnStatusChanging(RunStatus value);
    partial void OnStatusChanged();
    partial void OnMemoryChanging(System.Nullable<int> value);
    partial void OnMemoryChanged();
    partial void OnExecutionTimeChanging(System.Nullable<int> value);
    partial void OnExecutionTimeChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnPointsChanging(System.Nullable<int> value);
    partial void OnPointsChanged();
    partial void OnContestIdChanging(System.Nullable<int> value);
    partial void OnContestIdChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    partial void OnTypeChanging(RunType value);
    partial void OnTypeChanged();
    #endregion
		
		public Run()
		{
			this._TestRuns = new EntitySet<TestRun>(new Action<TestRun>(this.attach_TestRuns), new Action<TestRun>(this.detach_TestRuns));
			this._Contest = default(EntityRef<Contest>);
			this._Language = default(EntityRef<Language>);
			this._Problem = default(EntityRef<Problem>);
			this._Rating = default(EntityRef<Rating>);
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RunId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RunId
		{
			get
			{
				return this._RunId;
			}
			set
			{
				if ((this._RunId != value))
				{
					this.OnRunIdChanging(value);
					this.SendPropertyChanging();
					this._RunId = value;
					this.SendPropertyChanged("RunId");
					this.OnRunIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProblemId", DbType="Int NOT NULL")]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int")]
		public System.Nullable<int> TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int")]
		public System.Nullable<int> RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public RunStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Memory", DbType="Int")]
		public System.Nullable<int> Memory
		{
			get
			{
				return this._Memory;
			}
			set
			{
				if ((this._Memory != value))
				{
					this.OnMemoryChanging(value);
					this.SendPropertyChanging();
					this._Memory = value;
					this.SendPropertyChanged("Memory");
					this.OnMemoryChanged();
				}
			}
		}
		
		[Column(Storage="_ExecutionTime", DbType="Int")]
		public System.Nullable<int> ExecutionTime
		{
			get
			{
				return this._ExecutionTime;
			}
			set
			{
				if ((this._ExecutionTime != value))
				{
					this.OnExecutionTimeChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTime = value;
					this.SendPropertyChanged("ExecutionTime");
					this.OnExecutionTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageId", DbType="Int NOT NULL")]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_ContestId", DbType="Int")]
		public System.Nullable<int> ContestId
		{
			get
			{
				return this._ContestId;
			}
			set
			{
				if ((this._ContestId != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContestIdChanging(value);
					this.SendPropertyChanging();
					this._ContestId = value;
					this.SendPropertyChanged("ContestId");
					this.OnContestIdChanged();
				}
			}
		}
		
		[Column(Storage="_Error", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public RunType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Run_TestRun", Storage="_TestRuns", OtherKey="RunId")]
		public EntitySet<TestRun> TestRuns
		{
			get
			{
				return this._TestRuns;
			}
			set
			{
				this._TestRuns.Assign(value);
			}
		}
		
		[Association(Name="Contest_Run", Storage="_Contest", ThisKey="ContestId", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.Runs.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.Runs.Add(this);
						this._ContestId = value.ContestId;
					}
					else
					{
						this._ContestId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		[Association(Name="Language_Run", Storage="_Language", ThisKey="LanguageId", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Runs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Runs.Add(this);
						this._LanguageId = value.LanguageId;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="Problem_Run", Storage="_Problem", ThisKey="ProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Runs.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Runs.Add(this);
						this._ProblemId = value.ProblemId;
					}
					else
					{
						this._ProblemId = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		[Association(Name="Rating_Run", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Runs.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Runs.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="Topic_Run", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Runs.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Runs.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_Run", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Runs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Runs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestRuns(TestRun entity)
		{
			this.SendPropertyChanging();
			entity.Run = this;
		}
		
		private void detach_TestRuns(TestRun entity)
		{
			this.SendPropertyChanging();
			entity.Run = null;
		}
	}
	
	[Table(Name="dbo.Sources")]
	public partial class Source : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SourceId;
		
		private string _Name;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceIdChanging(int value);
    partial void OnSourceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Source()
		{
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[Column(Storage="_SourceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SourceId
		{
			get
			{
				return this._SourceId;
			}
			set
			{
				if ((this._SourceId != value))
				{
					this.OnSourceIdChanging(value);
					this.SendPropertyChanging();
					this._SourceId = value;
					this.SendPropertyChanged("SourceId");
					this.OnSourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Source_Problem", Storage="_Problems", OtherKey="SourceId")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Source = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Source = null;
		}
	}
	
	[Table(Name="dbo.Standings")]
	public partial class Standing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StandingId;
		
		private int _UserId;
		
		private System.DateTime _Timestamp;
		
		private int _Points;
		
		private int _Rank;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStandingIdChanging(int value);
    partial void OnStandingIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnRankChanging(int value);
    partial void OnRankChanged();
    #endregion
		
		public Standing()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_StandingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StandingId
		{
			get
			{
				return this._StandingId;
			}
			set
			{
				if ((this._StandingId != value))
				{
					this.OnStandingIdChanging(value);
					this.SendPropertyChanging();
					this._StandingId = value;
					this.SendPropertyChanged("StandingId");
					this.OnStandingIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_Rank", DbType="Int NOT NULL")]
		public int Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Association(Name="User_Standing", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Standings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Standings.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SuggestedEntities")]
	public partial class SuggestedEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SuggestedEntityId;
		
		private string _Name;
		
		private string _Domain;
		
		private string _NotifyEmail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuggestedEntityIdChanging(int value);
    partial void OnSuggestedEntityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnNotifyEmailChanging(string value);
    partial void OnNotifyEmailChanged();
    #endregion
		
		public SuggestedEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_SuggestedEntityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SuggestedEntityId
		{
			get
			{
				return this._SuggestedEntityId;
			}
			set
			{
				if ((this._SuggestedEntityId != value))
				{
					this.OnSuggestedEntityIdChanging(value);
					this.SendPropertyChanging();
					this._SuggestedEntityId = value;
					this.SendPropertyChanged("SuggestedEntityId");
					this.OnSuggestedEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyEmail", DbType="VarChar(320) NOT NULL", CanBeNull=false)]
		public string NotifyEmail
		{
			get
			{
				return this._NotifyEmail;
			}
			set
			{
				if ((this._NotifyEmail != value))
				{
					this.OnNotifyEmailChanging(value);
					this.SendPropertyChanging();
					this._NotifyEmail = value;
					this.SendPropertyChanged("NotifyEmail");
					this.OnNotifyEmailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagId;
		
		private string _Keyword;
		
		private System.Nullable<int> _ParentTagId;
		
		private string _UrlName;
		
		private int _CategoryFlags;
		
		private EntitySet<BlogTag> _BlogTags;
		
		private EntitySet<ProblemTag> _ProblemTags;
		
		private EntitySet<Tag> _Tags;
		
		private EntityRef<Tag> _Tag1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnKeywordChanging(string value);
    partial void OnKeywordChanged();
    partial void OnParentTagIdChanging(System.Nullable<int> value);
    partial void OnParentTagIdChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnCategoryFlagsChanging(int value);
    partial void OnCategoryFlagsChanged();
    #endregion
		
		public Tag()
		{
			this._BlogTags = new EntitySet<BlogTag>(new Action<BlogTag>(this.attach_BlogTags), new Action<BlogTag>(this.detach_BlogTags));
			this._ProblemTags = new EntitySet<ProblemTag>(new Action<ProblemTag>(this.attach_ProblemTags), new Action<ProblemTag>(this.detach_ProblemTags));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._Tag1 = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[Column(Storage="_TagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_Keyword", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Keyword
		{
			get
			{
				return this._Keyword;
			}
			set
			{
				if ((this._Keyword != value))
				{
					this.OnKeywordChanging(value);
					this.SendPropertyChanging();
					this._Keyword = value;
					this.SendPropertyChanged("Keyword");
					this.OnKeywordChanged();
				}
			}
		}
		
		[Column(Storage="_ParentTagId", DbType="Int")]
		public System.Nullable<int> ParentTagId
		{
			get
			{
				return this._ParentTagId;
			}
			set
			{
				if ((this._ParentTagId != value))
				{
					if (this._Tag1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTagIdChanging(value);
					this.SendPropertyChanging();
					this._ParentTagId = value;
					this.SendPropertyChanged("ParentTagId");
					this.OnParentTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryFlags", DbType="Int NOT NULL")]
		public int CategoryFlags
		{
			get
			{
				return this._CategoryFlags;
			}
			set
			{
				if ((this._CategoryFlags != value))
				{
					this.OnCategoryFlagsChanging(value);
					this.SendPropertyChanging();
					this._CategoryFlags = value;
					this.SendPropertyChanged("CategoryFlags");
					this.OnCategoryFlagsChanged();
				}
			}
		}
		
		[Association(Name="Tag_BlogTag", Storage="_BlogTags", OtherKey="TagId")]
		public EntitySet<BlogTag> BlogTags
		{
			get
			{
				return this._BlogTags;
			}
			set
			{
				this._BlogTags.Assign(value);
			}
		}
		
		[Association(Name="Tag_ProblemTag", Storage="_ProblemTags", OtherKey="TagId")]
		public EntitySet<ProblemTag> ProblemTags
		{
			get
			{
				return this._ProblemTags;
			}
			set
			{
				this._ProblemTags.Assign(value);
			}
		}
		
		[Association(Name="Tag_Tag", Storage="_Tags", OtherKey="ParentTagId")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="Tag_Tag", Storage="_Tag1", ThisKey="ParentTagId", IsForeignKey=true)]
		public Tag Tag1
		{
			get
			{
				return this._Tag1.Entity;
			}
			set
			{
				Tag previousValue = this._Tag1.Entity;
				if (((previousValue != value) 
							|| (this._Tag1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag1.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Tag1.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._ParentTagId = value.TagId;
					}
					else
					{
						this._ParentTagId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tag1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogTags(BlogTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_BlogTags(BlogTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_ProblemTags(ProblemTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_ProblemTags(ProblemTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag1 = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag1 = null;
		}
	}
	
	[Table(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private int _UserId;
		
		private System.Nullable<int> _AffiliationId;
		
		private int _TopicId;
		
		private System.DateTime _Timestamp;
		
		private string _Name;
		
		private string _Description;
		
		private TeamStatus _Status;
		
		private TeamScope _Scope;
		
		private System.Nullable<int> _PictureId;
		
		private string _UrlName;
		
		private EntitySet<ContestUser> _ContestUsers;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<TeamUser> _TeamUsers;
		
		private EntityRef<Affiliation> _Affiliation;
		
		private EntityRef<Picture> _Picture;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnAffiliationIdChanging(System.Nullable<int> value);
    partial void OnAffiliationIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(TeamStatus value);
    partial void OnStatusChanged();
    partial void OnScopeChanging(TeamScope value);
    partial void OnScopeChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    #endregion
		
		public Team()
		{
			this._ContestUsers = new EntitySet<ContestUser>(new Action<ContestUser>(this.attach_ContestUsers), new Action<ContestUser>(this.detach_ContestUsers));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._TeamUsers = new EntitySet<TeamUser>(new Action<TeamUser>(this.attach_TeamUsers), new Action<TeamUser>(this.detach_TeamUsers));
			this._Affiliation = default(EntityRef<Affiliation>);
			this._Picture = default(EntityRef<Picture>);
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_TeamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_AffiliationId", DbType="Int")]
		public System.Nullable<int> AffiliationId
		{
			get
			{
				return this._AffiliationId;
			}
			set
			{
				if ((this._AffiliationId != value))
				{
					if (this._Affiliation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffiliationIdChanging(value);
					this.SendPropertyChanging();
					this._AffiliationId = value;
					this.SendPropertyChanged("AffiliationId");
					this.OnAffiliationIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public TeamStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Scope", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public TeamScope Scope
		{
			get
			{
				return this._Scope;
			}
			set
			{
				if ((this._Scope != value))
				{
					this.OnScopeChanging(value);
					this.SendPropertyChanging();
					this._Scope = value;
					this.SendPropertyChanged("Scope");
					this.OnScopeChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Association(Name="Team_ContestUser", Storage="_ContestUsers", OtherKey="TeamId")]
		public EntitySet<ContestUser> ContestUsers
		{
			get
			{
				return this._ContestUsers;
			}
			set
			{
				this._ContestUsers.Assign(value);
			}
		}
		
		[Association(Name="Team_Event", Storage="_Events", OtherKey="TeamId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="Team_TeamUser", Storage="_TeamUsers", OtherKey="TeamId")]
		public EntitySet<TeamUser> TeamUsers
		{
			get
			{
				return this._TeamUsers;
			}
			set
			{
				this._TeamUsers.Assign(value);
			}
		}
		
		[Association(Name="Affiliation_Team", Storage="_Affiliation", ThisKey="AffiliationId", IsForeignKey=true)]
		public Affiliation Affiliation
		{
			get
			{
				return this._Affiliation.Entity;
			}
			set
			{
				Affiliation previousValue = this._Affiliation.Entity;
				if (((previousValue != value) 
							|| (this._Affiliation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Affiliation.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Affiliation.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._AffiliationId = value.AffiliationId;
					}
					else
					{
						this._AffiliationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Affiliation");
				}
			}
		}
		
		[Association(Name="Picture_Team", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[Association(Name="Topic_Team", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_Team", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContestUsers(ContestUser entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_ContestUsers(ContestUser entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[Table(Name="dbo.TeamUsers")]
	public partial class TeamUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private int _UserId;
		
		private TeamUserStatus _Status;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnStatusChanging(TeamUserStatus value);
    partial void OnStatusChanged();
    #endregion
		
		public TeamUser()
		{
			this._Team = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_TeamId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public TeamUserStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Team_TeamUser", Storage="_Team", ThisKey="TeamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamUsers.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamUsers.Add(this);
						this._TeamId = value.TeamId;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="User_TeamUser", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TeamUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TeamUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TestCases")]
	public partial class TestCase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestCaseId;
		
		private int _ProblemId;
		
		private System.Data.Linq.Link<string> _Input;
		
		private string _Output;
		
		private byte _TimeFactor;
		
		private EntitySet<TestRun> _TestRuns;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestCaseIdChanging(int value);
    partial void OnTestCaseIdChanged();
    partial void OnProblemIdChanging(int value);
    partial void OnProblemIdChanged();
    partial void OnInputChanging(string value);
    partial void OnInputChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    partial void OnTimeFactorChanging(byte value);
    partial void OnTimeFactorChanged();
    #endregion
		
		public TestCase()
		{
			this._TestRuns = new EntitySet<TestRun>(new Action<TestRun>(this.attach_TestRuns), new Action<TestRun>(this.detach_TestRuns));
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[Column(Storage="_TestCaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestCaseId
		{
			get
			{
				return this._TestCaseId;
			}
			set
			{
				if ((this._TestCaseId != value))
				{
					this.OnTestCaseIdChanging(value);
					this.SendPropertyChanging();
					this._TestCaseId = value;
					this.SendPropertyChanged("TestCaseId");
					this.OnTestCaseIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProblemId", DbType="Int NOT NULL")]
		public int ProblemId
		{
			get
			{
				return this._ProblemId;
			}
			set
			{
				if ((this._ProblemId != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIdChanging(value);
					this.SendPropertyChanging();
					this._ProblemId = value;
					this.SendPropertyChanged("ProblemId");
					this.OnProblemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Input", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Input
		{
			get
			{
				return this._Input.Value;
			}
			set
			{
				if ((this._Input.Value != value))
				{
					this.OnInputChanging(value);
					this.SendPropertyChanging();
					this._Input.Value = value;
					this.SendPropertyChanged("Input");
					this.OnInputChanged();
				}
			}
		}
		
		[Column(Storage="_Output", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[Column(Storage="_TimeFactor", DbType="TinyInt NOT NULL")]
		public byte TimeFactor
		{
			get
			{
				return this._TimeFactor;
			}
			set
			{
				if ((this._TimeFactor != value))
				{
					this.OnTimeFactorChanging(value);
					this.SendPropertyChanging();
					this._TimeFactor = value;
					this.SendPropertyChanged("TimeFactor");
					this.OnTimeFactorChanged();
				}
			}
		}
		
		[Association(Name="TestCase_TestRun", Storage="_TestRuns", OtherKey="TestCaseId")]
		public EntitySet<TestRun> TestRuns
		{
			get
			{
				return this._TestRuns;
			}
			set
			{
				this._TestRuns.Assign(value);
			}
		}
		
		[Association(Name="Problem_TestCase", Storage="_Problem", ThisKey="ProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.TestCases.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.TestCases.Add(this);
						this._ProblemId = value.ProblemId;
					}
					else
					{
						this._ProblemId = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestRuns(TestRun entity)
		{
			this.SendPropertyChanging();
			entity.TestCase = this;
		}
		
		private void detach_TestRuns(TestRun entity)
		{
			this.SendPropertyChanging();
			entity.TestCase = null;
		}
	}
	
	[Table(Name="dbo.TestRuns")]
	public partial class TestRun : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestRunId;
		
		private int _TestCaseId;
		
		private int _RunId;
		
		private string _Output;
		
		private TestRunStatus _Status;
		
		private string _Error;
		
		private EntityRef<Run> _Run;
		
		private EntityRef<TestCase> _TestCase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestRunIdChanging(int value);
    partial void OnTestRunIdChanged();
    partial void OnTestCaseIdChanging(int value);
    partial void OnTestCaseIdChanged();
    partial void OnRunIdChanging(int value);
    partial void OnRunIdChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    partial void OnStatusChanging(TestRunStatus value);
    partial void OnStatusChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    #endregion
		
		public TestRun()
		{
			this._Run = default(EntityRef<Run>);
			this._TestCase = default(EntityRef<TestCase>);
			OnCreated();
		}
		
		[Column(Storage="_TestRunId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestRunId
		{
			get
			{
				return this._TestRunId;
			}
			set
			{
				if ((this._TestRunId != value))
				{
					this.OnTestRunIdChanging(value);
					this.SendPropertyChanging();
					this._TestRunId = value;
					this.SendPropertyChanged("TestRunId");
					this.OnTestRunIdChanged();
				}
			}
		}
		
		[Column(Storage="_TestCaseId", DbType="Int NOT NULL")]
		public int TestCaseId
		{
			get
			{
				return this._TestCaseId;
			}
			set
			{
				if ((this._TestCaseId != value))
				{
					if (this._TestCase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestCaseIdChanging(value);
					this.SendPropertyChanging();
					this._TestCaseId = value;
					this.SendPropertyChanged("TestCaseId");
					this.OnTestCaseIdChanged();
				}
			}
		}
		
		[Column(Storage="_RunId", DbType="Int NOT NULL")]
		public int RunId
		{
			get
			{
				return this._RunId;
			}
			set
			{
				if ((this._RunId != value))
				{
					if (this._Run.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRunIdChanging(value);
					this.SendPropertyChanging();
					this._RunId = value;
					this.SendPropertyChanged("RunId");
					this.OnRunIdChanged();
				}
			}
		}
		
		[Column(Storage="_Output", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public TestRunStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Error", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[Association(Name="Run_TestRun", Storage="_Run", ThisKey="RunId", IsForeignKey=true)]
		public Run Run
		{
			get
			{
				return this._Run.Entity;
			}
			set
			{
				Run previousValue = this._Run.Entity;
				if (((previousValue != value) 
							|| (this._Run.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Run.Entity = null;
						previousValue.TestRuns.Remove(this);
					}
					this._Run.Entity = value;
					if ((value != null))
					{
						value.TestRuns.Add(this);
						this._RunId = value.RunId;
					}
					else
					{
						this._RunId = default(int);
					}
					this.SendPropertyChanged("Run");
				}
			}
		}
		
		[Association(Name="TestCase_TestRun", Storage="_TestCase", ThisKey="TestCaseId", IsForeignKey=true)]
		public TestCase TestCase
		{
			get
			{
				return this._TestCase.Entity;
			}
			set
			{
				TestCase previousValue = this._TestCase.Entity;
				if (((previousValue != value) 
							|| (this._TestCase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestCase.Entity = null;
						previousValue.TestRuns.Remove(this);
					}
					this._TestCase.Entity = value;
					if ((value != null))
					{
						value.TestRuns.Add(this);
						this._TestCaseId = value.TestCaseId;
					}
					else
					{
						this._TestCaseId = default(int);
					}
					this.SendPropertyChanged("TestCase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Topics")]
	public partial class Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TopicId;
		
		private int _ForumId;
		
		private int _UserId;
		
		private System.DateTime _Timestamp;
		
		private string _Title;
		
		private byte _Status;
		
		private bool _Visible;
		
		private EntitySet<Editorial> _Editorials;
		
		private EntitySet<Entity> _Entities;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Run> _Runs;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<TopicSubscription> _TopicSubscriptions;
		
		private EntitySet<CodeSnippet> _CodeSnippets;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
		
		public Topic()
		{
			this._Editorials = new EntitySet<Editorial>(new Action<Editorial>(this.attach_Editorials), new Action<Editorial>(this.detach_Editorials));
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Runs = new EntitySet<Run>(new Action<Run>(this.attach_Runs), new Action<Run>(this.detach_Runs));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._TopicSubscriptions = new EntitySet<TopicSubscription>(new Action<TopicSubscription>(this.attach_TopicSubscriptions), new Action<TopicSubscription>(this.detach_TopicSubscriptions));
			this._CodeSnippets = new EntitySet<CodeSnippet>(new Action<CodeSnippet>(this.attach_CodeSnippets), new Action<CodeSnippet>(this.detach_CodeSnippets));
			this._Forum = default(EntityRef<Forum>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_TopicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForumId", DbType="Int NOT NULL")]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Association(Name="Topic_Editorial", Storage="_Editorials", OtherKey="TopicId")]
		public EntitySet<Editorial> Editorials
		{
			get
			{
				return this._Editorials;
			}
			set
			{
				this._Editorials.Assign(value);
			}
		}
		
		[Association(Name="Topic_Entity", Storage="_Entities", OtherKey="TopicId")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		[Association(Name="Topic_Event", Storage="_Events", OtherKey="TopicId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="Topic_Post", Storage="_Posts", OtherKey="TopicId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="Topic_Run", Storage="_Runs", OtherKey="TopicId")]
		public EntitySet<Run> Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				this._Runs.Assign(value);
			}
		}
		
		[Association(Name="Topic_Team", Storage="_Teams", OtherKey="TopicId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[Association(Name="Topic_TopicSubscription", Storage="_TopicSubscriptions", OtherKey="TopicId")]
		public EntitySet<TopicSubscription> TopicSubscriptions
		{
			get
			{
				return this._TopicSubscriptions;
			}
			set
			{
				this._TopicSubscriptions.Assign(value);
			}
		}
		
		[Association(Name="Topic_CodeSnippet", Storage="_CodeSnippets", OtherKey="TopicId")]
		public EntitySet<CodeSnippet> CodeSnippets
		{
			get
			{
				return this._CodeSnippets;
			}
			set
			{
				this._CodeSnippets.Assign(value);
			}
		}
		
		[Association(Name="Forum_Topic", Storage="_Forum", ThisKey="ForumId", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._ForumId = value.ForumId;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[Association(Name="User_Topic", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_TopicSubscriptions(TopicSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_TopicSubscriptions(TopicSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
	}
	
	[Table(Name="dbo.TopicSubscriptions")]
	public partial class TopicSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _TopicId;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    #endregion
		
		public TopicSubscription()
		{
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Association(Name="Topic_TopicSubscription", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.TopicSubscriptions.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.TopicSubscriptions.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_TopicSubscription", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TopicSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TopicSubscriptions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserRatings")]
	public partial class UserRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingId;
		
		private int _UserId;
		
		private int _Value;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public UserRating()
		{
			this._Rating = default(EntityRef<Rating>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="Rating_UserRating", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.UserRatings.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.UserRatings.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="User_UserRating", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRatings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRatings.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Login;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _ShortName;
		
		private int _CountryId;
		
		private string _Timezone;
		
		private System.DateTime _Timestamp;
		
		private int _LanguageId;
		
		private System.Nullable<int> _TopicId;
		
		private System.Nullable<int> _AffiliationId;
		
		private string _Password;
		
		private string _ActivationCode;
		
		private UserStatus _Status;
		
		private int _Points;
		
		private int _GlobalRank;
		
		private int _CountryRank;
		
		private int _EntityRank;
		
		private int _ReferralCount;
		
		private string _ReferralCode;
		
		private User.UserToolTips _TooltipFlag;
		
		private User.UserOptions _OptionFlag;
		
		private System.Nullable<int> _PictureId;
		
		private User.UserPermissions _PermissionsFlag;
		
		private EntitySet<Affiliation> _Affiliations;
		
		private EntitySet<ArticleChange> _ArticleChanges;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<ContestUser> _ContestUsers;
		
		private EntitySet<Editorial> _Editorials;
		
		private EntitySet<EventInvitation> _EventInvitations;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Friend> _Friends;
		
		private EntitySet<Friend> _Friends1;
		
		private EntitySet<NewsFeed> _NewsFeeds;
		
		private EntitySet<Notification> _Notifications;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<ProblemSubmission> _ProblemSubmissions;
		
		private EntitySet<ProblemTag> _ProblemTags;
		
		private EntitySet<Run> _Runs;
		
		private EntitySet<Standing> _Standings;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<TeamUser> _TeamUsers;
		
		private EntitySet<Topic> _Topics;
		
		private EntitySet<TopicSubscription> _TopicSubscriptions;
		
		private EntitySet<UserRating> _UserRatings;
		
		private EntitySet<CodeSnippet> _CodeSnippets;
		
		private EntityRef<Affiliation> _Affiliation;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnTimezoneChanging(string value);
    partial void OnTimezoneChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnTopicIdChanging(System.Nullable<int> value);
    partial void OnTopicIdChanged();
    partial void OnAffiliationIdChanging(System.Nullable<int> value);
    partial void OnAffiliationIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActivationCodeChanging(string value);
    partial void OnActivationCodeChanged();
    partial void OnStatusChanging(UserStatus value);
    partial void OnStatusChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnGlobalRankChanging(int value);
    partial void OnGlobalRankChanged();
    partial void OnCountryRankChanging(int value);
    partial void OnCountryRankChanged();
    partial void OnEntityRankChanging(int value);
    partial void OnEntityRankChanged();
    partial void OnReferralCountChanging(int value);
    partial void OnReferralCountChanged();
    partial void OnReferralCodeChanging(string value);
    partial void OnReferralCodeChanged();
    partial void OnTooltipFlagChanging(User.UserToolTips value);
    partial void OnTooltipFlagChanged();
    partial void OnOptionFlagChanging(User.UserOptions value);
    partial void OnOptionFlagChanged();
    partial void OnPictureIdChanging(System.Nullable<int> value);
    partial void OnPictureIdChanged();
    partial void OnPermissionsFlagChanging(User.UserPermissions value);
    partial void OnPermissionsFlagChanged();
    #endregion
		
		public User()
		{
			this._Affiliations = new EntitySet<Affiliation>(new Action<Affiliation>(this.attach_Affiliations), new Action<Affiliation>(this.detach_Affiliations));
			this._ArticleChanges = new EntitySet<ArticleChange>(new Action<ArticleChange>(this.attach_ArticleChanges), new Action<ArticleChange>(this.detach_ArticleChanges));
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._ContestUsers = new EntitySet<ContestUser>(new Action<ContestUser>(this.attach_ContestUsers), new Action<ContestUser>(this.detach_ContestUsers));
			this._Editorials = new EntitySet<Editorial>(new Action<Editorial>(this.attach_Editorials), new Action<Editorial>(this.detach_Editorials));
			this._EventInvitations = new EntitySet<EventInvitation>(new Action<EventInvitation>(this.attach_EventInvitations), new Action<EventInvitation>(this.detach_EventInvitations));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Friends = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends), new Action<Friend>(this.detach_Friends));
			this._Friends1 = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends1), new Action<Friend>(this.detach_Friends1));
			this._NewsFeeds = new EntitySet<NewsFeed>(new Action<NewsFeed>(this.attach_NewsFeeds), new Action<NewsFeed>(this.detach_NewsFeeds));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._ProblemSubmissions = new EntitySet<ProblemSubmission>(new Action<ProblemSubmission>(this.attach_ProblemSubmissions), new Action<ProblemSubmission>(this.detach_ProblemSubmissions));
			this._ProblemTags = new EntitySet<ProblemTag>(new Action<ProblemTag>(this.attach_ProblemTags), new Action<ProblemTag>(this.detach_ProblemTags));
			this._Runs = new EntitySet<Run>(new Action<Run>(this.attach_Runs), new Action<Run>(this.detach_Runs));
			this._Standings = new EntitySet<Standing>(new Action<Standing>(this.attach_Standings), new Action<Standing>(this.detach_Standings));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._TeamUsers = new EntitySet<TeamUser>(new Action<TeamUser>(this.attach_TeamUsers), new Action<TeamUser>(this.detach_TeamUsers));
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			this._TopicSubscriptions = new EntitySet<TopicSubscription>(new Action<TopicSubscription>(this.attach_TopicSubscriptions), new Action<TopicSubscription>(this.detach_TopicSubscriptions));
			this._UserRatings = new EntitySet<UserRating>(new Action<UserRating>(this.attach_UserRatings), new Action<UserRating>(this.detach_UserRatings));
			this._CodeSnippets = new EntitySet<CodeSnippet>(new Action<CodeSnippet>(this.attach_CodeSnippets), new Action<CodeSnippet>(this.detach_CodeSnippets));
			this._Affiliation = default(EntityRef<Affiliation>);
			this._Country = default(EntityRef<Country>);
			this._Language = default(EntityRef<Language>);
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="VarChar(320) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(320) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timezone", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Timezone
		{
			get
			{
				return this._Timezone;
			}
			set
			{
				if ((this._Timezone != value))
				{
					this.OnTimezoneChanging(value);
					this.SendPropertyChanging();
					this._Timezone = value;
					this.SendPropertyChanged("Timezone");
					this.OnTimezoneChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageId", DbType="Int NOT NULL")]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int")]
		public System.Nullable<int> TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_AffiliationId", DbType="Int")]
		public System.Nullable<int> AffiliationId
		{
			get
			{
				return this._AffiliationId;
			}
			set
			{
				if ((this._AffiliationId != value))
				{
					if (this._Affiliation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffiliationIdChanging(value);
					this.SendPropertyChanging();
					this._AffiliationId = value;
					this.SendPropertyChanged("AffiliationId");
					this.OnAffiliationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_ActivationCode", DbType="VarChar(16)")]
		public string ActivationCode
		{
			get
			{
				return this._ActivationCode;
			}
			set
			{
				if ((this._ActivationCode != value))
				{
					this.OnActivationCodeChanging(value);
					this.SendPropertyChanging();
					this._ActivationCode = value;
					this.SendPropertyChanged("ActivationCode");
					this.OnActivationCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public UserStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_GlobalRank", DbType="Int NOT NULL")]
		public int GlobalRank
		{
			get
			{
				return this._GlobalRank;
			}
			set
			{
				if ((this._GlobalRank != value))
				{
					this.OnGlobalRankChanging(value);
					this.SendPropertyChanging();
					this._GlobalRank = value;
					this.SendPropertyChanged("GlobalRank");
					this.OnGlobalRankChanged();
				}
			}
		}
		
		[Column(Storage="_CountryRank", DbType="Int NOT NULL")]
		public int CountryRank
		{
			get
			{
				return this._CountryRank;
			}
			set
			{
				if ((this._CountryRank != value))
				{
					this.OnCountryRankChanging(value);
					this.SendPropertyChanging();
					this._CountryRank = value;
					this.SendPropertyChanged("CountryRank");
					this.OnCountryRankChanged();
				}
			}
		}
		
		[Column(Storage="_EntityRank", DbType="Int NOT NULL")]
		public int EntityRank
		{
			get
			{
				return this._EntityRank;
			}
			set
			{
				if ((this._EntityRank != value))
				{
					this.OnEntityRankChanging(value);
					this.SendPropertyChanging();
					this._EntityRank = value;
					this.SendPropertyChanged("EntityRank");
					this.OnEntityRankChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralCount", DbType="Int NOT NULL")]
		public int ReferralCount
		{
			get
			{
				return this._ReferralCount;
			}
			set
			{
				if ((this._ReferralCount != value))
				{
					this.OnReferralCountChanging(value);
					this.SendPropertyChanging();
					this._ReferralCount = value;
					this.SendPropertyChanged("ReferralCount");
					this.OnReferralCountChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralCode", DbType="VarChar(32)")]
		public string ReferralCode
		{
			get
			{
				return this._ReferralCode;
			}
			set
			{
				if ((this._ReferralCode != value))
				{
					this.OnReferralCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferralCode = value;
					this.SendPropertyChanged("ReferralCode");
					this.OnReferralCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TooltipFlag", DbType="Int NOT NULL", CanBeNull=false)]
		public User.UserToolTips TooltipFlag
		{
			get
			{
				return this._TooltipFlag;
			}
			set
			{
				if ((this._TooltipFlag != value))
				{
					this.OnTooltipFlagChanging(value);
					this.SendPropertyChanging();
					this._TooltipFlag = value;
					this.SendPropertyChanged("TooltipFlag");
					this.OnTooltipFlagChanged();
				}
			}
		}
		
		[Column(Storage="_OptionFlag", DbType="Int NOT NULL", CanBeNull=false)]
		public User.UserOptions OptionFlag
		{
			get
			{
				return this._OptionFlag;
			}
			set
			{
				if ((this._OptionFlag != value))
				{
					this.OnOptionFlagChanging(value);
					this.SendPropertyChanging();
					this._OptionFlag = value;
					this.SendPropertyChanged("OptionFlag");
					this.OnOptionFlagChanged();
				}
			}
		}
		
		[Column(Storage="_PictureId", DbType="Int")]
		public System.Nullable<int> PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionsFlag", DbType="Int NOT NULL", CanBeNull=false)]
		public User.UserPermissions PermissionsFlag
		{
			get
			{
				return this._PermissionsFlag;
			}
			set
			{
				if ((this._PermissionsFlag != value))
				{
					this.OnPermissionsFlagChanging(value);
					this.SendPropertyChanging();
					this._PermissionsFlag = value;
					this.SendPropertyChanged("PermissionsFlag");
					this.OnPermissionsFlagChanged();
				}
			}
		}
		
		[Association(Name="User_Affiliation", Storage="_Affiliations", OtherKey="UserId")]
		public EntitySet<Affiliation> Affiliations
		{
			get
			{
				return this._Affiliations;
			}
			set
			{
				this._Affiliations.Assign(value);
			}
		}
		
		[Association(Name="User_ArticleChange", Storage="_ArticleChanges", OtherKey="UserId")]
		public EntitySet<ArticleChange> ArticleChanges
		{
			get
			{
				return this._ArticleChanges;
			}
			set
			{
				this._ArticleChanges.Assign(value);
			}
		}
		
		[Association(Name="User_Blog", Storage="_Blogs", OtherKey="UserId")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[Association(Name="User_ContestUser", Storage="_ContestUsers", OtherKey="UserId")]
		public EntitySet<ContestUser> ContestUsers
		{
			get
			{
				return this._ContestUsers;
			}
			set
			{
				this._ContestUsers.Assign(value);
			}
		}
		
		[Association(Name="User_Editorial", Storage="_Editorials", OtherKey="UserId")]
		public EntitySet<Editorial> Editorials
		{
			get
			{
				return this._Editorials;
			}
			set
			{
				this._Editorials.Assign(value);
			}
		}
		
		[Association(Name="User_EventInvitation", Storage="_EventInvitations", OtherKey="UserId")]
		public EntitySet<EventInvitation> EventInvitations
		{
			get
			{
				return this._EventInvitations;
			}
			set
			{
				this._EventInvitations.Assign(value);
			}
		}
		
		[Association(Name="User_Event", Storage="_Events", OtherKey="UserId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="User_Friend", Storage="_Friends", OtherKey="FriendId")]
		public EntitySet<Friend> Friends
		{
			get
			{
				return this._Friends;
			}
			set
			{
				this._Friends.Assign(value);
			}
		}
		
		[Association(Name="User_Friend1", Storage="_Friends1", OtherKey="UserId")]
		public EntitySet<Friend> Friends1
		{
			get
			{
				return this._Friends1;
			}
			set
			{
				this._Friends1.Assign(value);
			}
		}
		
		[Association(Name="User_NewsFeed", Storage="_NewsFeeds", OtherKey="UserId")]
		public EntitySet<NewsFeed> NewsFeeds
		{
			get
			{
				return this._NewsFeeds;
			}
			set
			{
				this._NewsFeeds.Assign(value);
			}
		}
		
		[Association(Name="User_Notification", Storage="_Notifications", OtherKey="UserId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[Association(Name="User_Post", Storage="_Posts", OtherKey="UserId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="User_Problem", Storage="_Problems", OtherKey="UserId")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[Association(Name="User_ProblemSubmission", Storage="_ProblemSubmissions", OtherKey="UserId")]
		public EntitySet<ProblemSubmission> ProblemSubmissions
		{
			get
			{
				return this._ProblemSubmissions;
			}
			set
			{
				this._ProblemSubmissions.Assign(value);
			}
		}
		
		[Association(Name="User_ProblemTag", Storage="_ProblemTags", OtherKey="UserId")]
		public EntitySet<ProblemTag> ProblemTags
		{
			get
			{
				return this._ProblemTags;
			}
			set
			{
				this._ProblemTags.Assign(value);
			}
		}
		
		[Association(Name="User_Run", Storage="_Runs", OtherKey="UserId")]
		public EntitySet<Run> Runs
		{
			get
			{
				return this._Runs;
			}
			set
			{
				this._Runs.Assign(value);
			}
		}
		
		[Association(Name="User_Standing", Storage="_Standings", OtherKey="UserId")]
		public EntitySet<Standing> Standings
		{
			get
			{
				return this._Standings;
			}
			set
			{
				this._Standings.Assign(value);
			}
		}
		
		[Association(Name="User_Team", Storage="_Teams", OtherKey="UserId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[Association(Name="User_TeamUser", Storage="_TeamUsers", OtherKey="UserId")]
		public EntitySet<TeamUser> TeamUsers
		{
			get
			{
				return this._TeamUsers;
			}
			set
			{
				this._TeamUsers.Assign(value);
			}
		}
		
		[Association(Name="User_Topic", Storage="_Topics", OtherKey="UserId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[Association(Name="User_TopicSubscription", Storage="_TopicSubscriptions", OtherKey="UserId")]
		public EntitySet<TopicSubscription> TopicSubscriptions
		{
			get
			{
				return this._TopicSubscriptions;
			}
			set
			{
				this._TopicSubscriptions.Assign(value);
			}
		}
		
		[Association(Name="User_UserRating", Storage="_UserRatings", OtherKey="UserId")]
		public EntitySet<UserRating> UserRatings
		{
			get
			{
				return this._UserRatings;
			}
			set
			{
				this._UserRatings.Assign(value);
			}
		}
		
		[Association(Name="User_CodeSnippet", Storage="_CodeSnippets", OtherKey="UserId")]
		public EntitySet<CodeSnippet> CodeSnippets
		{
			get
			{
				return this._CodeSnippets;
			}
			set
			{
				this._CodeSnippets.Assign(value);
			}
		}
		
		[Association(Name="Affiliation_User", Storage="_Affiliation", ThisKey="AffiliationId", IsForeignKey=true)]
		public Affiliation Affiliation
		{
			get
			{
				return this._Affiliation.Entity;
			}
			set
			{
				Affiliation previousValue = this._Affiliation.Entity;
				if (((previousValue != value) 
							|| (this._Affiliation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Affiliation.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Affiliation.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._AffiliationId = value.AffiliationId;
					}
					else
					{
						this._AffiliationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Affiliation");
				}
			}
		}
		
		[Association(Name="Country_User", Storage="_Country", ThisKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Language_User", Storage="_Language", ThisKey="LanguageId", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._LanguageId = value.LanguageId;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="Picture_User", Storage="_Picture", ThisKey="PictureId", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._PictureId = value.PictureId;
					}
					else
					{
						this._PictureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Affiliations(Affiliation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Affiliations(Affiliation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ArticleChanges(ArticleChange entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ArticleChanges(ArticleChange entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ContestUsers(ContestUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ContestUsers(ContestUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Editorials(Editorial entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventInvitations(EventInvitation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventInvitations(EventInvitation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_NewsFeeds(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NewsFeeds(NewsFeed entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProblemSubmissions(ProblemSubmission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProblemSubmissions(ProblemSubmission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProblemTags(ProblemTag entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProblemTags(ProblemTag entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Runs(Run entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Standings(Standing entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Standings(Standing entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TopicSubscriptions(TopicSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TopicSubscriptions(TopicSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRatings(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRatings(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CodeSnippets(CodeSnippet entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.CodeSnippets")]
	public partial class CodeSnippet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SnippetId;
		
		private int _UserId;
		
		private int _RatingId;
		
		private int _TopicId;
		
		private int _LanguageId;
		
		private string _Snippet;
		
		private string _Name;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Rating> _Rating;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSnippetIdChanging(int value);
    partial void OnSnippetIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnSnippetChanging(string value);
    partial void OnSnippetChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public CodeSnippet()
		{
			this._Language = default(EntityRef<Language>);
			this._Rating = default(EntityRef<Rating>);
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_SnippetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SnippetId
		{
			get
			{
				return this._SnippetId;
			}
			set
			{
				if ((this._SnippetId != value))
				{
					this.OnSnippetIdChanging(value);
					this.SendPropertyChanging();
					this._SnippetId = value;
					this.SendPropertyChanged("SnippetId");
					this.OnSnippetIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RatingId", DbType="Int NOT NULL")]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageId", DbType="Int NOT NULL")]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Snippet", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Snippet
		{
			get
			{
				return this._Snippet;
			}
			set
			{
				if ((this._Snippet != value))
				{
					this.OnSnippetChanging(value);
					this.SendPropertyChanging();
					this._Snippet = value;
					this.SendPropertyChanged("Snippet");
					this.OnSnippetChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Language_CodeSnippet", Storage="_Language", ThisKey="LanguageId", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.CodeSnippets.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.CodeSnippets.Add(this);
						this._LanguageId = value.LanguageId;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[Association(Name="Rating_CodeSnippet", Storage="_Rating", ThisKey="RatingId", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.CodeSnippets.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.CodeSnippets.Add(this);
						this._RatingId = value.RatingId;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		[Association(Name="Topic_CodeSnippet", Storage="_Topic", ThisKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.CodeSnippets.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.CodeSnippets.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="User_CodeSnippet", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CodeSnippets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CodeSnippets.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
